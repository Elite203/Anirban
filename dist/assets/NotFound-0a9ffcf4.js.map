{"version":3,"file":"NotFound-0a9ffcf4.js","sources":["../../node_modules/gsap/utils/paths.js","../../node_modules/gsap/MorphSVGPlugin.js","../../src/pages/NotFound.jsx"],"sourcesContent":["/*!\n * paths 3.13.0\n * https://gsap.com\n *\n * Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n    _numbersExp = /(?:(-)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n    _scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n    _selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/i,\n    _DEG2RAD = Math.PI / 180,\n    _RAD2DEG = 180 / Math.PI,\n    _sin = Math.sin,\n    _cos = Math.cos,\n    _abs = Math.abs,\n    _sqrt = Math.sqrt,\n    _atan2 = Math.atan2,\n    _largeNum = 1e8,\n    _isString = function _isString(value) {\n  return typeof value === \"string\";\n},\n    _isNumber = function _isNumber(value) {\n  return typeof value === \"number\";\n},\n    _isUndefined = function _isUndefined(value) {\n  return typeof value === \"undefined\";\n},\n    _temp = {},\n    _temp2 = {},\n    _roundingNum = 1e5,\n    _wrapProgress = function _wrapProgress(progress) {\n  return Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum || (progress < 0 ? 0 : 1);\n},\n    //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.\n_round = function _round(value) {\n  return Math.round(value * _roundingNum) / _roundingNum || 0;\n},\n    _roundPrecise = function _roundPrecise(value) {\n  return Math.round(value * 1e10) / 1e10 || 0;\n},\n    _splitSegment = function _splitSegment(rawPath, segIndex, i, t) {\n  var segment = rawPath[segIndex],\n      shift = t === 1 ? 6 : subdivideSegment(segment, i, t);\n\n  if ((shift || !t) && shift + i + 2 < segment.length) {\n    rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));\n    segment.splice(0, i + shift);\n    return 1;\n  }\n},\n    _getSampleIndex = function _getSampleIndex(samples, length, progress) {\n  // slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;\n  var l = samples.length,\n      i = ~~(progress * l);\n\n  if (samples[i] > length) {\n    while (--i && samples[i] > length) {}\n\n    i < 0 && (i = 0);\n  } else {\n    while (samples[++i] < length && i < l) {}\n  }\n\n  return i < l ? i : l - 1;\n},\n    _reverseRawPath = function _reverseRawPath(rawPath, skipOuter) {\n  var i = rawPath.length;\n  skipOuter || rawPath.reverse();\n\n  while (i--) {\n    rawPath[i].reversed || reverseSegment(rawPath[i]);\n  }\n},\n    _copyMetaData = function _copyMetaData(source, copy) {\n  copy.totalLength = source.totalLength;\n\n  if (source.samples) {\n    //segment\n    copy.samples = source.samples.slice(0);\n    copy.lookup = source.lookup.slice(0);\n    copy.minLength = source.minLength;\n    copy.resolution = source.resolution;\n  } else if (source.totalPoints) {\n    //rawPath\n    copy.totalPoints = source.totalPoints;\n  }\n\n  return copy;\n},\n    //pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)\n_appendOrMerge = function _appendOrMerge(rawPath, segment) {\n  var index = rawPath.length,\n      prevSeg = rawPath[index - 1] || [],\n      l = prevSeg.length;\n\n  if (index && segment[0] === prevSeg[l - 2] && segment[1] === prevSeg[l - 1]) {\n    segment = prevSeg.concat(segment.slice(2));\n    index--;\n  }\n\n  rawPath[index] = segment;\n},\n    _bestDistance;\n/* TERMINOLOGY\n - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple \"M\" commands, defining Segments (paths aren't always connected).\n - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.\n - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.\n - the variable \"t\" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the \"p\" or \"progress\" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. \"t\" is ONLY in an individual Bezier piece.\n */\n//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).\n\n\nexport function getRawPath(value) {\n  value = _isString(value) && _selectorExp.test(value) ? document.querySelector(value) || value : value;\n  var e = value.getAttribute ? value : 0,\n      rawPath;\n\n  if (e && (value = value.getAttribute(\"d\"))) {\n    //implements caching\n    if (!e._gsPath) {\n      e._gsPath = {};\n    }\n\n    rawPath = e._gsPath[value];\n    return rawPath && !rawPath._dirty ? rawPath : e._gsPath[value] = stringToRawPath(value);\n  }\n\n  return !value ? console.warn(\"Expecting a <path> element or an SVG path data string\") : _isString(value) ? stringToRawPath(value) : _isNumber(value[0]) ? [value] : value;\n} //copies a RawPath WITHOUT the length meta data (for speed)\n\nexport function copyRawPath(rawPath) {\n  var a = [],\n      i = 0;\n\n  for (; i < rawPath.length; i++) {\n    a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));\n  }\n\n  return _copyMetaData(rawPath, a);\n}\nexport function reverseSegment(segment) {\n  var i = 0,\n      y;\n  segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.\n\n  for (; i < segment.length; i += 2) {\n    y = segment[i];\n    segment[i] = segment[i + 1];\n    segment[i + 1] = y;\n  }\n\n  segment.reversed = !segment.reversed;\n}\n\nvar _createPath = function _createPath(e, ignore) {\n  var path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\"),\n      attr = [].slice.call(e.attributes),\n      i = attr.length,\n      name;\n  ignore = \",\" + ignore + \",\";\n\n  while (--i > -1) {\n    name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.\n\n    if (ignore.indexOf(\",\" + name + \",\") < 0) {\n      path.setAttributeNS(null, name, attr[i].nodeValue);\n    }\n  }\n\n  return path;\n},\n    _typeAttrs = {\n  rect: \"rx,ry,x,y,width,height\",\n  circle: \"r,cx,cy\",\n  ellipse: \"rx,ry,cx,cy\",\n  line: \"x1,x2,y1,y2\"\n},\n    _attrToObj = function _attrToObj(e, attrs) {\n  var props = attrs ? attrs.split(\",\") : [],\n      obj = {},\n      i = props.length;\n\n  while (--i > -1) {\n    obj[props[i]] = +e.getAttribute(props[i]) || 0;\n  }\n\n  return obj;\n}; //converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.\n\n\nexport function convertToPath(element, swap) {\n  var type = element.tagName.toLowerCase(),\n      circ = 0.552284749831,\n      data,\n      x,\n      y,\n      r,\n      ry,\n      path,\n      rcirc,\n      rycirc,\n      points,\n      w,\n      h,\n      x2,\n      x3,\n      x4,\n      x5,\n      x6,\n      y2,\n      y3,\n      y4,\n      y5,\n      y6,\n      attr;\n\n  if (type === \"path\" || !element.getBBox) {\n    return element;\n  }\n\n  path = _createPath(element, \"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points\");\n  attr = _attrToObj(element, _typeAttrs[type]);\n\n  if (type === \"rect\") {\n    r = attr.rx;\n    ry = attr.ry || r;\n    x = attr.x;\n    y = attr.y;\n    w = attr.width - r * 2;\n    h = attr.height - ry * 2;\n\n    if (r || ry) {\n      //if there are rounded corners, render cubic beziers\n      x2 = x + r * (1 - circ);\n      x3 = x + r;\n      x4 = x3 + w;\n      x5 = x4 + r * circ;\n      x6 = x4 + r;\n      y2 = y + ry * (1 - circ);\n      y3 = y + ry;\n      y4 = y3 + h;\n      y5 = y4 + ry * circ;\n      y6 = y4 + ry;\n      data = \"M\" + x6 + \",\" + y3 + \" V\" + y4 + \" C\" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(\",\") + \"z\";\n    } else {\n      data = \"M\" + (x + w) + \",\" + y + \" v\" + h + \" h\" + -w + \" v\" + -h + \" h\" + w + \"z\";\n    }\n  } else if (type === \"circle\" || type === \"ellipse\") {\n    if (type === \"circle\") {\n      r = ry = attr.r;\n      rycirc = r * circ;\n    } else {\n      r = attr.rx;\n      ry = attr.ry;\n      rycirc = ry * circ;\n    }\n\n    x = attr.cx;\n    y = attr.cy;\n    rcirc = r * circ;\n    data = \"M\" + (x + r) + \",\" + y + \" C\" + [x + r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(\",\") + \"z\";\n  } else if (type === \"line\") {\n    data = \"M\" + attr.x1 + \",\" + attr.y1 + \" L\" + attr.x2 + \",\" + attr.y2; //previously, we just converted to \"Mx,y Lx,y\" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.\n  } else if (type === \"polyline\" || type === \"polygon\") {\n    points = (element.getAttribute(\"points\") + \"\").match(_numbersExp) || [];\n    x = points.shift();\n    y = points.shift();\n    data = \"M\" + x + \",\" + y + \" L\" + points.join(\",\");\n\n    if (type === \"polygon\") {\n      data += \",\" + x + \",\" + y + \"z\";\n    }\n  }\n\n  path.setAttribute(\"d\", rawPathToString(path._gsRawPath = stringToRawPath(data)));\n\n  if (swap && element.parentNode) {\n    element.parentNode.insertBefore(path, element);\n    element.parentNode.removeChild(element);\n  }\n\n  return path;\n} //returns the rotation (in degrees) at a particular progress on a rawPath (the slope of the tangent)\n\nexport function getRotationAtProgress(rawPath, progress) {\n  var d = getProgressData(rawPath, progress >= 1 ? 1 - 1e-9 : progress ? progress : 1e-9);\n  return getRotationAtBezierT(d.segment, d.i, d.t);\n}\n\nfunction getRotationAtBezierT(segment, i, t) {\n  var a = segment[i],\n      b = segment[i + 2],\n      c = segment[i + 4],\n      x;\n  a += (b - a) * t;\n  b += (c - b) * t;\n  a += (b - a) * t;\n  x = b + (c + (segment[i + 6] - c) * t - b) * t - a;\n  a = segment[i + 1];\n  b = segment[i + 3];\n  c = segment[i + 5];\n  a += (b - a) * t;\n  b += (c - b) * t;\n  a += (b - a) * t;\n  return _round(_atan2(b + (c + (segment[i + 7] - c) * t - b) * t - a, x) * _RAD2DEG);\n}\n\nexport function sliceRawPath(rawPath, start, end) {\n  end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.\n\n  start = _roundPrecise(start) || 0;\n  var loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),\n      path = copyRawPath(rawPath);\n\n  if (start > end) {\n    start = 1 - start;\n    end = 1 - end;\n\n    _reverseRawPath(path);\n\n    path.totalLength = 0;\n  }\n\n  if (start < 0 || end < 0) {\n    var offset = Math.abs(~~Math.min(start, end)) + 1;\n    start += offset;\n    end += offset;\n  }\n\n  path.totalLength || cacheRawPathMeasurements(path);\n  var wrap = end > 1,\n      s = getProgressData(path, start, _temp, true),\n      e = getProgressData(path, end, _temp2),\n      eSeg = e.segment,\n      sSeg = s.segment,\n      eSegIndex = e.segIndex,\n      sSegIndex = s.segIndex,\n      ei = e.i,\n      si = s.i,\n      sameSegment = sSegIndex === eSegIndex,\n      sameBezier = ei === si && sameSegment,\n      wrapsBehind,\n      sShift,\n      eShift,\n      i,\n      copy,\n      totalSegments,\n      l,\n      j;\n\n  if (wrap || loops) {\n    wrapsBehind = eSegIndex < sSegIndex || sameSegment && ei < si || sameBezier && e.t < s.t;\n\n    if (_splitSegment(path, sSegIndex, si, s.t)) {\n      sSegIndex++;\n\n      if (!wrapsBehind) {\n        eSegIndex++;\n\n        if (sameBezier) {\n          e.t = (e.t - s.t) / (1 - s.t);\n          ei = 0;\n        } else if (sameSegment) {\n          ei -= si;\n        }\n      }\n    }\n\n    if (Math.abs(1 - (end - start)) < 1e-5) {\n      eSegIndex = sSegIndex - 1;\n    } else if (!e.t && eSegIndex) {\n      eSegIndex--;\n    } else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {\n      sSegIndex++;\n    }\n\n    if (s.t === 1) {\n      sSegIndex = (sSegIndex + 1) % path.length;\n    }\n\n    copy = [];\n    totalSegments = path.length;\n    l = 1 + totalSegments * loops;\n    j = sSegIndex;\n    l += (totalSegments - sSegIndex + eSegIndex) % totalSegments;\n\n    for (i = 0; i < l; i++) {\n      _appendOrMerge(copy, path[j++ % totalSegments]);\n    }\n\n    path = copy;\n  } else {\n    eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);\n\n    if (start !== end) {\n      sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);\n      sameSegment && (eShift += sShift);\n      eSeg.splice(ei + eShift + 2);\n      (sShift || si) && sSeg.splice(0, si + sShift);\n      i = path.length;\n\n      while (i--) {\n        //chop off any extra segments\n        (i < sSegIndex || i > eSegIndex) && path.splice(i, 1);\n      }\n    } else {\n      eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!\n\n      ei += eShift;\n      s = eSeg[ei];\n      e = eSeg[ei + 1];\n      eSeg.length = eSeg.totalLength = 0;\n      eSeg.totalPoints = path.totalPoints = 8;\n      eSeg.push(s, e, s, e, s, e, s, e);\n    }\n  }\n\n  path.totalLength = 0;\n  return path;\n} //measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a \"samples\" Array that has the length up to each of those sample points (always increasing from the start) as well as a \"lookup\" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a \"totalLength\" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.\n\nfunction measureSegment(segment, startIndex, bezierQty) {\n  startIndex = startIndex || 0;\n\n  if (!segment.samples) {\n    segment.samples = [];\n    segment.lookup = [];\n  }\n\n  var resolution = ~~segment.resolution || 12,\n      inc = 1 / resolution,\n      endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,\n      x1 = segment[startIndex],\n      y1 = segment[startIndex + 1],\n      samplesIndex = startIndex ? startIndex / 6 * resolution : 0,\n      samples = segment.samples,\n      lookup = segment.lookup,\n      min = (startIndex ? segment.minLength : _largeNum) || _largeNum,\n      prevLength = samples[samplesIndex + bezierQty * resolution - 1],\n      length = startIndex ? samples[samplesIndex - 1] : 0,\n      i,\n      j,\n      x4,\n      x3,\n      x2,\n      xd,\n      xd1,\n      y4,\n      y3,\n      y2,\n      yd,\n      yd1,\n      inv,\n      t,\n      lengthIndex,\n      l,\n      segLength;\n  samples.length = lookup.length = 0;\n\n  for (j = startIndex + 2; j < endIndex; j += 6) {\n    x4 = segment[j + 4] - x1;\n    x3 = segment[j + 2] - x1;\n    x2 = segment[j] - x1;\n    y4 = segment[j + 5] - y1;\n    y3 = segment[j + 3] - y1;\n    y2 = segment[j + 1] - y1;\n    xd = xd1 = yd = yd1 = 0;\n\n    if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) {\n      //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)\n      if (segment.length > 8) {\n        segment.splice(j, 6);\n        j -= 6;\n        endIndex -= 6;\n      }\n    } else {\n      for (i = 1; i <= resolution; i++) {\n        t = inc * i;\n        inv = 1 - t;\n        xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);\n        yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);\n        l = _sqrt(yd * yd + xd * xd);\n\n        if (l < min) {\n          min = l;\n        }\n\n        length += l;\n        samples[samplesIndex++] = length;\n      }\n    }\n\n    x1 += x4;\n    y1 += y4;\n  }\n\n  if (prevLength) {\n    prevLength -= length;\n\n    for (; samplesIndex < samples.length; samplesIndex++) {\n      samples[samplesIndex] += prevLength;\n    }\n  }\n\n  if (samples.length && min) {\n    segment.totalLength = segLength = samples[samples.length - 1] || 0;\n    segment.minLength = min;\n\n    if (segLength / min < 9999) {\n      // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array\n      l = lengthIndex = 0;\n\n      for (i = 0; i < segLength; i += min) {\n        lookup[l++] = samples[lengthIndex] < i ? ++lengthIndex : lengthIndex;\n      }\n    }\n  } else {\n    segment.totalLength = samples[0] = 0;\n  }\n\n  return startIndex ? length - samples[startIndex / 2 - 1] : length;\n}\n\nexport function cacheRawPathMeasurements(rawPath, resolution) {\n  var pathLength, points, i;\n\n  for (i = pathLength = points = 0; i < rawPath.length; i++) {\n    rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)\n\n    points += rawPath[i].length;\n    pathLength += measureSegment(rawPath[i]);\n  }\n\n  rawPath.totalPoints = points;\n  rawPath.totalLength = pathLength;\n  return rawPath;\n} //divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)\n\nexport function subdivideSegment(segment, i, t) {\n  if (t <= 0 || t >= 1) {\n    return 0;\n  }\n\n  var ax = segment[i],\n      ay = segment[i + 1],\n      cp1x = segment[i + 2],\n      cp1y = segment[i + 3],\n      cp2x = segment[i + 4],\n      cp2y = segment[i + 5],\n      bx = segment[i + 6],\n      by = segment[i + 7],\n      x1a = ax + (cp1x - ax) * t,\n      x2 = cp1x + (cp2x - cp1x) * t,\n      y1a = ay + (cp1y - ay) * t,\n      y2 = cp1y + (cp2y - cp1y) * t,\n      x1 = x1a + (x2 - x1a) * t,\n      y1 = y1a + (y2 - y1a) * t,\n      x2a = cp2x + (bx - cp2x) * t,\n      y2a = cp2y + (by - cp2y) * t;\n  x2 += (x2a - x2) * t;\n  y2 += (y2a - y2) * t;\n  segment.splice(i + 2, 4, _round(x1a), //first control point\n  _round(y1a), _round(x1), //second control point\n  _round(y1), _round(x1 + (x2 - x1) * t), //new fabricated anchor on line\n  _round(y1 + (y2 - y1) * t), _round(x2), //third control point\n  _round(y2), _round(x2a), //fourth control point\n  _round(y2a));\n  segment.samples && segment.samples.splice(i / 6 * segment.resolution | 0, 0, 0, 0, 0, 0, 0, 0);\n  return 6;\n} // returns an object {path, segment, segIndex, i, t}\n\nfunction getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {\n  decoratee = decoratee || {};\n  rawPath.totalLength || cacheRawPathMeasurements(rawPath);\n\n  if (progress < 0 || progress > 1) {\n    progress = _wrapProgress(progress);\n  }\n\n  var segIndex = 0,\n      segment = rawPath[0],\n      samples,\n      resolution,\n      length,\n      min,\n      max,\n      i,\n      t;\n\n  if (!progress) {\n    t = i = segIndex = 0;\n    segment = rawPath[0];\n  } else if (progress === 1) {\n    t = 1;\n    segIndex = rawPath.length - 1;\n    segment = rawPath[segIndex];\n    i = segment.length - 8;\n  } else {\n    if (rawPath.length > 1) {\n      //speed optimization: most of the time, there's only one segment so skip the recursion.\n      length = rawPath.totalLength * progress;\n      max = i = 0;\n\n      while ((max += rawPath[i++].totalLength) < length) {\n        segIndex = i;\n      }\n\n      segment = rawPath[segIndex];\n      min = max - segment.totalLength;\n      progress = (length - min) / (max - min) || 0;\n    }\n\n    samples = segment.samples;\n    resolution = segment.resolution; //how many samples per cubic bezier chunk\n\n    length = segment.totalLength * progress;\n    i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);\n    min = i ? samples[i - 1] : 0;\n    max = samples[i];\n\n    if (max < length) {\n      min = max;\n      max = samples[++i];\n    }\n\n    t = 1 / resolution * ((length - min) / (max - min) + i % resolution);\n    i = ~~(i / resolution) * 6;\n\n    if (pushToNextIfAtEnd && t === 1) {\n      if (i + 6 < segment.length) {\n        i += 6;\n        t = 0;\n      } else if (segIndex + 1 < rawPath.length) {\n        i = t = 0;\n        segment = rawPath[++segIndex];\n      }\n    }\n  }\n\n  decoratee.t = t;\n  decoratee.i = i;\n  decoratee.path = rawPath;\n  decoratee.segment = segment;\n  decoratee.segIndex = segIndex;\n  return decoratee;\n}\n\nexport function getPositionOnPath(rawPath, progress, includeAngle, point) {\n  var segment = rawPath[0],\n      result = point || {},\n      samples,\n      resolution,\n      length,\n      min,\n      max,\n      i,\n      t,\n      a,\n      inv;\n\n  if (progress < 0 || progress > 1) {\n    progress = _wrapProgress(progress);\n  }\n\n  segment.lookup || cacheRawPathMeasurements(rawPath);\n\n  if (rawPath.length > 1) {\n    //speed optimization: most of the time, there's only one segment so skip the recursion.\n    length = rawPath.totalLength * progress;\n    max = i = 0;\n\n    while ((max += rawPath[i++].totalLength) < length) {\n      segment = rawPath[i];\n    }\n\n    min = max - segment.totalLength;\n    progress = (length - min) / (max - min) || 0;\n  }\n\n  samples = segment.samples;\n  resolution = segment.resolution;\n  length = segment.totalLength * progress;\n  i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);\n  min = i ? samples[i - 1] : 0;\n  max = samples[i];\n\n  if (max < length) {\n    min = max;\n    max = samples[++i];\n  }\n\n  t = 1 / resolution * ((length - min) / (max - min) + i % resolution) || 0;\n  inv = 1 - t;\n  i = ~~(i / resolution) * 6;\n  a = segment[i];\n  result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);\n  result.y = _round((t * t * (segment[i + 7] - (a = segment[i + 1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);\n\n  if (includeAngle) {\n    result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;\n  }\n\n  return result;\n} //applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).\n\nexport function transformRawPath(rawPath, a, b, c, d, tx, ty) {\n  var j = rawPath.length,\n      segment,\n      l,\n      i,\n      x,\n      y;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    l = segment.length;\n\n    for (i = 0; i < l; i += 2) {\n      x = segment[i];\n      y = segment[i + 1];\n      segment[i] = x * a + y * c + tx;\n      segment[i + 1] = x * b + y * d + ty;\n    }\n  }\n\n  rawPath._dirty = 1;\n  return rawPath;\n} // translates SVG arc data into a segment (cubic beziers). Angle is in degrees.\n\nfunction arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n  if (lastX === x && lastY === y) {\n    return;\n  }\n\n  rx = _abs(rx);\n  ry = _abs(ry);\n\n  var angleRad = angle % 360 * _DEG2RAD,\n      cosAngle = _cos(angleRad),\n      sinAngle = _sin(angleRad),\n      PI = Math.PI,\n      TWOPI = PI * 2,\n      dx2 = (lastX - x) / 2,\n      dy2 = (lastY - y) / 2,\n      x1 = cosAngle * dx2 + sinAngle * dy2,\n      y1 = -sinAngle * dx2 + cosAngle * dy2,\n      x1_sq = x1 * x1,\n      y1_sq = y1 * y1,\n      radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);\n\n  if (radiiCheck > 1) {\n    rx = _sqrt(radiiCheck) * rx;\n    ry = _sqrt(radiiCheck) * ry;\n  }\n\n  var rx_sq = rx * rx,\n      ry_sq = ry * ry,\n      sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);\n\n  if (sq < 0) {\n    sq = 0;\n  }\n\n  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),\n      cx1 = coef * (rx * y1 / ry),\n      cy1 = coef * -(ry * x1 / rx),\n      sx2 = (lastX + x) / 2,\n      sy2 = (lastY + y) / 2,\n      cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),\n      cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),\n      ux = (x1 - cx1) / rx,\n      uy = (y1 - cy1) / ry,\n      vx = (-x1 - cx1) / rx,\n      vy = (-y1 - cy1) / ry,\n      temp = ux * ux + uy * uy,\n      angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),\n      angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));\n\n  isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.\n\n  if (!sweepFlag && angleExtent > 0) {\n    angleExtent -= TWOPI;\n  } else if (sweepFlag && angleExtent < 0) {\n    angleExtent += TWOPI;\n  }\n\n  angleStart %= TWOPI;\n  angleExtent %= TWOPI;\n\n  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),\n      rawPath = [],\n      angleIncrement = angleExtent / segments,\n      controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),\n      ma = cosAngle * rx,\n      mb = sinAngle * rx,\n      mc = sinAngle * -ry,\n      md = cosAngle * ry,\n      i;\n\n  for (i = 0; i < segments; i++) {\n    angle = angleStart + i * angleIncrement;\n    x1 = _cos(angle);\n    y1 = _sin(angle);\n    ux = _cos(angle += angleIncrement);\n    uy = _sin(angle);\n    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);\n  } //now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).\n\n\n  for (i = 0; i < rawPath.length; i += 2) {\n    x1 = rawPath[i];\n    y1 = rawPath[i + 1];\n    rawPath[i] = x1 * ma + y1 * mc + cx;\n    rawPath[i + 1] = x1 * mb + y1 * md + cy;\n  }\n\n  rawPath[i - 2] = x; //always set the end to exactly where it's supposed to be\n\n  rawPath[i - 1] = y;\n  return rawPath;\n} //Spits back a RawPath with absolute coordinates. Each segment starts with a \"moveTo\" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.\n\n\nexport function stringToRawPath(d) {\n  var a = (d + \"\").replace(_scientific, function (m) {\n    var n = +m;\n    return n < 0.0001 && n > -0.0001 ? 0 : n;\n  }).match(_svgPathExp) || [],\n      //some authoring programs spit out very small numbers in scientific notation like \"1e-5\", so make sure we round that down to 0 first.\n  path = [],\n      relativeX = 0,\n      relativeY = 0,\n      twoThirds = 2 / 3,\n      elements = a.length,\n      points = 0,\n      errorMessage = \"ERROR: malformed path: \" + d,\n      i,\n      j,\n      x,\n      y,\n      command,\n      isRelative,\n      segment,\n      startX,\n      startY,\n      difX,\n      difY,\n      beziers,\n      prevCommand,\n      flag1,\n      flag2,\n      line = function line(sx, sy, ex, ey) {\n    difX = (ex - sx) / 3;\n    difY = (ey - sy) / 3;\n    segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);\n  };\n\n  if (!d || !isNaN(a[0]) || isNaN(a[1])) {\n    console.log(errorMessage);\n    return path;\n  }\n\n  for (i = 0; i < elements; i++) {\n    prevCommand = command;\n\n    if (isNaN(a[i])) {\n      command = a[i].toUpperCase();\n      isRelative = command !== a[i]; //lower case means relative\n    } else {\n      //commands like \"C\" can be strung together without any new command characters between.\n      i--;\n    }\n\n    x = +a[i + 1];\n    y = +a[i + 2];\n\n    if (isRelative) {\n      x += relativeX;\n      y += relativeY;\n    }\n\n    if (!i) {\n      startX = x;\n      startY = y;\n    } // \"M\" (move)\n\n\n    if (command === \"M\") {\n      if (segment) {\n        if (segment.length < 8) {\n          //if the path data was funky and just had a M with no actual drawing anywhere, skip it.\n          path.length -= 1;\n        } else {\n          points += segment.length;\n        }\n      }\n\n      relativeX = startX = x;\n      relativeY = startY = y;\n      segment = [x, y];\n      path.push(segment);\n      i += 2;\n      command = \"L\"; //an \"M\" with more than 2 values gets interpreted as \"lineTo\" commands (\"L\").\n      // \"C\" (cubic bezier)\n    } else if (command === \"C\") {\n      if (!segment) {\n        segment = [0, 0];\n      }\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      } //note: \"*1\" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.\n\n\n      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);\n      i += 6; // \"S\" (continuation of cubic bezier)\n    } else if (command === \"S\") {\n      difX = relativeX;\n      difY = relativeY;\n\n      if (prevCommand === \"C\" || prevCommand === \"S\") {\n        difX += relativeX - segment[segment.length - 4];\n        difY += relativeY - segment[segment.length - 3];\n      }\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      }\n\n      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);\n      i += 4; // \"Q\" (quadratic bezier)\n    } else if (command === \"Q\") {\n      difX = relativeX + (x - relativeX) * twoThirds;\n      difY = relativeY + (y - relativeY) * twoThirds;\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      }\n\n      relativeX += a[i + 3] * 1;\n      relativeY += a[i + 4] * 1;\n      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);\n      i += 4; // \"T\" (continuation of quadratic bezier)\n    } else if (command === \"T\") {\n      difX = relativeX - segment[segment.length - 4];\n      difY = relativeY - segment[segment.length - 3];\n      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);\n      i += 2; // \"H\" (horizontal line)\n    } else if (command === \"H\") {\n      line(relativeX, relativeY, relativeX = x, relativeY);\n      i += 1; // \"V\" (vertical line)\n    } else if (command === \"V\") {\n      //adjust values because the first (and only one) isn't x in this case, it's y.\n      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));\n      i += 1; // \"L\" (line) or \"Z\" (close)\n    } else if (command === \"L\" || command === \"Z\") {\n      if (command === \"Z\") {\n        x = startX;\n        y = startY;\n        segment.closed = true;\n      }\n\n      if (command === \"L\" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {\n        line(relativeX, relativeY, x, y);\n\n        if (command === \"L\") {\n          i += 2;\n        }\n      }\n\n      relativeX = x;\n      relativeY = y; // \"A\" (arc)\n    } else if (command === \"A\") {\n      flag1 = a[i + 4];\n      flag2 = a[i + 5];\n      difX = a[i + 6];\n      difY = a[i + 7];\n      j = 7;\n\n      if (flag1.length > 1) {\n        // for cases when the flags are merged, like \"a8 8 0 018 8\" (the 0 and 1 flags are WITH the x value of 8, but it could also be \"a8 8 0 01-8 8\" so it may include x or not)\n        if (flag1.length < 3) {\n          difY = difX;\n          difX = flag2;\n          j--;\n        } else {\n          difY = flag2;\n          difX = flag1.substr(2);\n          j -= 2;\n        }\n\n        flag2 = flag1.charAt(1);\n        flag1 = flag1.charAt(0);\n      }\n\n      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);\n      i += j;\n\n      if (beziers) {\n        for (j = 0; j < beziers.length; j++) {\n          segment.push(beziers[j]);\n        }\n      }\n\n      relativeX = segment[segment.length - 2];\n      relativeY = segment[segment.length - 1];\n    } else {\n      console.log(errorMessage);\n    }\n  }\n\n  i = segment.length;\n\n  if (i < 6) {\n    //in case there's odd SVG like a M0,0 command at the very end.\n    path.pop();\n    i = 0;\n  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {\n    segment.closed = true;\n  }\n\n  path.totalPoints = points + i;\n  return path;\n} //populates the points array in alternating x/y values (like [x, y, x, y...] instead of individual point objects [{x, y}, {x, y}...] to conserve memory and stay in line with how we're handling segment arrays\n\nexport function bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n  var x12 = (x1 + x2) / 2,\n      y12 = (y1 + y2) / 2,\n      x23 = (x2 + x3) / 2,\n      y23 = (y2 + y3) / 2,\n      x34 = (x3 + x4) / 2,\n      y34 = (y3 + y4) / 2,\n      x123 = (x12 + x23) / 2,\n      y123 = (y12 + y23) / 2,\n      x234 = (x23 + x34) / 2,\n      y234 = (y23 + y34) / 2,\n      x1234 = (x123 + x234) / 2,\n      y1234 = (y123 + y234) / 2,\n      dx = x4 - x1,\n      dy = y4 - y1,\n      d2 = _abs((x2 - x4) * dy - (y2 - y4) * dx),\n      d3 = _abs((x3 - x4) * dy - (y3 - y4) * dx),\n      length;\n\n  if (!points) {\n    points = [x1, y1, x4, y4];\n    index = 2;\n  }\n\n  points.splice(index || points.length - 2, 0, x1234, y1234);\n\n  if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n    length = points.length;\n    bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n    bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 2 + (points.length - length));\n  }\n\n  return points;\n}\n/*\nfunction getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians\n\tvar dx1 = x1 - x0,\n\t\tdy1 = y1 - y0,\n\t\tdx2 = x2 - x1,\n\t\tdy2 = y2 - y1,\n\t\tdx3 = x2 - x0,\n\t\tdy3 = y2 - y0,\n\t\ta = dx1 * dx1 + dy1 * dy1,\n\t\tb = dx2 * dx2 + dy2 * dy2,\n\t\tc = dx3 * dx3 + dy3 * dy3;\n\treturn Math.acos( (a + b - c) / _sqrt(4 * a * b) );\n},\n*/\n//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)\n\nexport function flatPointsToSegment(points, curviness) {\n  if (curviness === void 0) {\n    curviness = 1;\n  }\n\n  var x = points[0],\n      y = 0,\n      segment = [x, y],\n      i = 2;\n\n  for (; i < points.length; i += 2) {\n    segment.push(x, y, points[i], y = (points[i] - x) * curviness / 2, x = points[i], -y);\n  }\n\n  return segment;\n} //points is an array of x/y points, like [x, y, x, y, x, y]\n\nexport function pointsToSegment(points, curviness) {\n  //points = simplifyPoints(points, tolerance);\n  _abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.\n\n  var l = points.length - 2,\n      x = +points[0],\n      y = +points[1],\n      nextX = +points[2],\n      nextY = +points[3],\n      segment = [x, y, x, y],\n      dx2 = nextX - x,\n      dy2 = nextY - y,\n      closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001,\n      prevX,\n      prevY,\n      i,\n      dx1,\n      dy1,\n      r1,\n      r2,\n      r3,\n      tl,\n      mx1,\n      mx2,\n      mxm,\n      my1,\n      my2,\n      mym;\n\n  if (closed) {\n    // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)\n    points.push(nextX, nextY);\n    nextX = x;\n    nextY = y;\n    x = points[l - 2];\n    y = points[l - 1];\n    points.unshift(x, y);\n    l += 4;\n  }\n\n  curviness = curviness || curviness === 0 ? +curviness : 1;\n\n  for (i = 2; i < l; i += 2) {\n    prevX = x;\n    prevY = y;\n    x = nextX;\n    y = nextY;\n    nextX = +points[i + 2];\n    nextY = +points[i + 3];\n\n    if (x === nextX && y === nextY) {\n      continue;\n    }\n\n    dx1 = dx2;\n    dy1 = dy2;\n    dx2 = nextX - x;\n    dy2 = nextY - y;\n    r1 = _sqrt(dx1 * dx1 + dy1 * dy1); // r1, r2, and r3 correlate x and y (and z in the future). Basically 2D or 3D hypotenuse\n\n    r2 = _sqrt(dx2 * dx2 + dy2 * dy2);\n    r3 = _sqrt(Math.pow(dx2 / r2 + dx1 / r1, 2) + Math.pow(dy2 / r2 + dy1 / r1, 2));\n    tl = (r1 + r2) * curviness * 0.25 / r3;\n    mx1 = x - (x - prevX) * (r1 ? tl / r1 : 0);\n    mx2 = x + (nextX - x) * (r2 ? tl / r2 : 0);\n    mxm = x - (mx1 + ((mx2 - mx1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));\n    my1 = y - (y - prevY) * (r1 ? tl / r1 : 0);\n    my2 = y + (nextY - y) * (r2 ? tl / r2 : 0);\n    mym = y - (my1 + ((my2 - my1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));\n\n    if (x !== prevX || y !== prevY) {\n      segment.push(_round(mx1 + mxm), // first control point\n      _round(my1 + mym), _round(x), // anchor\n      _round(y), _round(mx2 + mxm), // second control point\n      _round(my2 + mym));\n    }\n  }\n\n  x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : segment.length -= 2;\n\n  if (segment.length === 2) {\n    // only one point!\n    segment.push(x, y, x, y, x, y);\n  } else if (closed) {\n    segment.splice(0, 6);\n    segment.length = segment.length - 6;\n  }\n\n  return segment;\n} //returns the squared distance between an x/y coordinate and a segment between x1/y1 and x2/y2\n\nfunction pointToSegDist(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1,\n      dy = y2 - y1,\n      t;\n\n  if (dx || dy) {\n    t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n\n  return Math.pow(x - x1, 2) + Math.pow(y - y1, 2);\n}\n\nfunction simplifyStep(points, first, last, tolerance, simplified) {\n  var maxSqDist = tolerance,\n      firstX = points[first],\n      firstY = points[first + 1],\n      lastX = points[last],\n      lastY = points[last + 1],\n      index,\n      i,\n      d;\n\n  for (i = first + 2; i < last; i += 2) {\n    d = pointToSegDist(points[i], points[i + 1], firstX, firstY, lastX, lastY);\n\n    if (d > maxSqDist) {\n      index = i;\n      maxSqDist = d;\n    }\n  }\n\n  if (maxSqDist > tolerance) {\n    index - first > 2 && simplifyStep(points, first, index, tolerance, simplified);\n    simplified.push(points[index], points[index + 1]);\n    last - index > 2 && simplifyStep(points, index, last, tolerance, simplified);\n  }\n} //points is an array of x/y values like [x, y, x, y, x, y]\n\n\nexport function simplifyPoints(points, tolerance) {\n  var prevX = parseFloat(points[0]),\n      prevY = parseFloat(points[1]),\n      temp = [prevX, prevY],\n      l = points.length - 2,\n      i,\n      x,\n      y,\n      dx,\n      dy,\n      result,\n      last;\n  tolerance = Math.pow(tolerance || 1, 2);\n\n  for (i = 2; i < l; i += 2) {\n    x = parseFloat(points[i]);\n    y = parseFloat(points[i + 1]);\n    dx = prevX - x;\n    dy = prevY - y;\n\n    if (dx * dx + dy * dy > tolerance) {\n      temp.push(x, y);\n      prevX = x;\n      prevY = y;\n    }\n  }\n\n  temp.push(parseFloat(points[l]), parseFloat(points[l + 1]));\n  last = temp.length - 2;\n  result = [temp[0], temp[1]];\n  simplifyStep(temp, 0, last, tolerance, result);\n  result.push(temp[last], temp[last + 1]);\n  return result;\n}\n\nfunction getClosestProgressOnBezier(iterations, px, py, start, end, slices, x0, y0, x1, y1, x2, y2, x3, y3) {\n  var inc = (end - start) / slices,\n      best = 0,\n      t = start,\n      x,\n      y,\n      d,\n      dx,\n      dy,\n      inv;\n  _bestDistance = _largeNum;\n\n  while (t <= end) {\n    inv = 1 - t;\n    x = inv * inv * inv * x0 + 3 * inv * inv * t * x1 + 3 * inv * t * t * x2 + t * t * t * x3;\n    y = inv * inv * inv * y0 + 3 * inv * inv * t * y1 + 3 * inv * t * t * y2 + t * t * t * y3;\n    dx = x - px;\n    dy = y - py;\n    d = dx * dx + dy * dy;\n\n    if (d < _bestDistance) {\n      _bestDistance = d;\n      best = t;\n    }\n\n    t += inc;\n  }\n\n  return iterations > 1 ? getClosestProgressOnBezier(iterations - 1, px, py, Math.max(best - inc, 0), Math.min(best + inc, 1), slices, x0, y0, x1, y1, x2, y2, x3, y3) : best;\n}\n\nexport function getClosestData(rawPath, x, y, slices) {\n  //returns an object with the closest j, i, and t (j is the segment index, i is the index of the point in that segment, and t is the time/progress along that bezier)\n  var closest = {\n    j: 0,\n    i: 0,\n    t: 0\n  },\n      bestDistance = _largeNum,\n      i,\n      j,\n      t,\n      segment;\n\n  for (j = 0; j < rawPath.length; j++) {\n    segment = rawPath[j];\n\n    for (i = 0; i < segment.length; i += 6) {\n      t = getClosestProgressOnBezier(1, x, y, 0, 1, slices || 20, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n\n      if (bestDistance > _bestDistance) {\n        bestDistance = _bestDistance;\n        closest.j = j;\n        closest.i = i;\n        closest.t = t;\n      }\n    }\n  }\n\n  return closest;\n} //subdivide a Segment closest to a specific x,y coordinate\n\nexport function subdivideSegmentNear(x, y, segment, slices, iterations) {\n  var l = segment.length,\n      bestDistance = _largeNum,\n      bestT = 0,\n      bestSegmentIndex = 0,\n      t,\n      i;\n  slices = slices || 20;\n  iterations = iterations || 3;\n\n  for (i = 0; i < l; i += 6) {\n    t = getClosestProgressOnBezier(1, x, y, 0, 1, slices, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n\n    if (bestDistance > _bestDistance) {\n      bestDistance = _bestDistance;\n      bestT = t;\n      bestSegmentIndex = i;\n    }\n  }\n\n  t = getClosestProgressOnBezier(iterations, x, y, bestT - 0.05, bestT + 0.05, slices, segment[bestSegmentIndex], segment[bestSegmentIndex + 1], segment[bestSegmentIndex + 2], segment[bestSegmentIndex + 3], segment[bestSegmentIndex + 4], segment[bestSegmentIndex + 5], segment[bestSegmentIndex + 6], segment[bestSegmentIndex + 7]);\n  subdivideSegment(segment, bestSegmentIndex, t);\n  return bestSegmentIndex + 6;\n}\n/*\nTakes any of the following and converts it to an all Cubic Bezier SVG data string:\n- A <path> data string like \"M0,0 L2,4 v20,15 H100\"\n- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]\n- A Segment, like [x, y, x, y, x, y, x, y]\n\nNote: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13\n*/\n\nexport function rawPathToString(rawPath) {\n  if (_isNumber(rawPath[0])) {\n    //in case a segment is passed in instead\n    rawPath = [rawPath];\n  }\n\n  var result = \"\",\n      l = rawPath.length,\n      sl,\n      s,\n      i,\n      segment;\n\n  for (s = 0; s < l; s++) {\n    segment = rawPath[s];\n    result += \"M\" + _round(segment[0]) + \",\" + _round(segment[1]) + \" C\";\n    sl = segment.length;\n\n    for (i = 2; i < sl; i++) {\n      result += _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i]) + \" \";\n    }\n\n    if (segment.closed) {\n      result += \"z\";\n    }\n  }\n\n  return result;\n}\n/*\n// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.\nexport function cpCoordsToAngles(segment, copy) {\n\tvar result = copy ? segment.slice(0) : segment,\n\t\tx, y, i;\n\tfor (i = 0; i < segment.length; i+=6) {\n\t\tx = segment[i+2] - segment[i];\n\t\ty = segment[i+3] - segment[i+1];\n\t\tresult[i+2] = Math.atan2(y, x);\n\t\tresult[i+3] = Math.sqrt(x * x + y * y);\n\t\tx = segment[i+6] - segment[i+4];\n\t\ty = segment[i+7] - segment[i+5];\n\t\tresult[i+4] = Math.atan2(y, x);\n\t\tresult[i+5] = Math.sqrt(x * x + y * y);\n\t}\n\treturn result;\n}\n\n// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.\nexport function cpAnglesToCoords(segment, copy) {\n\tvar result = copy ? segment.slice(0) : segment,\n\t\tlength = segment.length,\n\t\trnd = 1000,\n\t\tangle, l, i, j;\n\tfor (i = 0; i < length; i+=6) {\n\t\tangle = segment[i+2];\n\t\tl = segment[i+3]; //length\n\t\tresult[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;\n\t\tresult[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;\n\t\tangle = segment[i+4];\n\t\tl = segment[i+5]; //length\n\t\tresult[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;\n\t\tresult[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;\n\t}\n\treturn result;\n}\n\n//adds an \"isSmooth\" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.\nexport function populateSmoothData(rawPath) {\n\tlet j = rawPath.length,\n\t\tsmooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;\n\twhile (--j > -1) {\n\t\tsegment = rawPath[j];\n\t\tisSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];\n\t\tsmoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];\n\t\tisSmooth.length = 4;\n\t\tl = segment.length - 2;\n\t\tfor (i = 6; i < l; i += 6) {\n\t\t\tx = segment[i] - segment[i - 2];\n\t\t\ty = segment[i + 1] - segment[i - 1];\n\t\t\tx2 = segment[i + 2] - segment[i];\n\t\t\ty2 = segment[i + 3] - segment[i + 1];\n\t\t\ta = _atan2(y, x);\n\t\t\ta2 = _atan2(y2, x2);\n\t\t\tsmooth = (Math.abs(a - a2) < 0.09);\n\t\t\tif (smooth) {\n\t\t\t\tsmoothData[i - 2] = a;\n\t\t\t\tsmoothData[i + 2] = a2;\n\t\t\t\tsmoothData[i - 1] = _sqrt(x * x + y * y);\n\t\t\t\tsmoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t}\n\t\t\tisSmooth.push(smooth, smooth, 0, 0, smooth, smooth);\n\t\t}\n\t\t//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.\n\t\tif (segment[l] === segment[0] && segment[l+1] === segment[1]) {\n\t\t\tx = segment[0] - segment[l-2];\n\t\t\ty = segment[1] - segment[l-1];\n\t\t\tx2 = segment[2] - segment[0];\n\t\t\ty2 = segment[3] - segment[1];\n\t\t\ta = _atan2(y, x);\n\t\t\ta2 = _atan2(y2, x2);\n\t\t\tif (Math.abs(a - a2) < 0.09) {\n\t\t\t\tsmoothData[l-2] = a;\n\t\t\t\tsmoothData[2] = a2;\n\t\t\t\tsmoothData[l-1] = _sqrt(x * x + y * y);\n\t\t\t\tsmoothData[3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t\tisSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.\n\t\t\t}\n\t\t}\n\t}\n\treturn rawPath;\n}\nexport function pointToScreen(svgElement, point) {\n\tif (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point\n\t\tlet rawPath = getRawPath(svgElement);\n\t\tpoint = svgElement.ownerSVGElement.createSVGPoint();\n\t\tpoint.x = rawPath[0][0];\n\t\tpoint.y = rawPath[0][1];\n\t}\n\treturn point.matrixTransform(svgElement.getScreenCTM());\n}\n// takes a <path> and normalizes all of its coordinates to values between 0 and 1\nexport function normalizePath(path) {\n  path = gsap.utils.toArray(path);\n  if (!path[0].hasAttribute(\"d\")) {\n    path = gsap.utils.toArray(path[0].children);\n  }\n  if (path.length > 1) {\n    path.forEach(normalizePath);\n    return path;\n  }\n  let _svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n      _scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n      d = path[0].getAttribute(\"d\"),\n      a = d.replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp),\n      nums = a.filter(n => !isNaN(n)).map(n => +n),\n      normalize = gsap.utils.normalize(Math.min(...nums), Math.max(...nums)),\n      finals = a.map(val => isNaN(val) ? val : normalize(+val)),\n      s = \"\",\n      prevWasCommand;\n  finals.forEach((value, i) => {\n    let isCommand = isNaN(value)\n    s += (isCommand && i ? \" \" : prevWasCommand || !i ? \"\" : \",\") + value;\n    prevWasCommand = isCommand;\n  });\n  path[0].setAttribute(\"d\", s);\n}\n*/","/*!\n * MorphSVGPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { getRawPath, reverseSegment, stringToRawPath, rawPathToString, convertToPath as _convertToPath } from \"./utils/paths.js\";\n\nvar gsap,\n    _toArray,\n    _lastLinkedAnchor,\n    _doc,\n    _coreInitted,\n    PluginClass,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _isFunction = function _isFunction(value) {\n  return typeof value === \"function\";\n},\n    _atan2 = Math.atan2,\n    _cos = Math.cos,\n    _sin = Math.sin,\n    _sqrt = Math.sqrt,\n    _PI = Math.PI,\n    _2PI = _PI * 2,\n    _angleMin = _PI * 0.3,\n    _angleMax = _PI * 0.7,\n    _bigNum = 1e20,\n    _numExp = /[-+=\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/gi,\n    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.\n_selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/i,\n    _commands = /[achlmqstvz]/i,\n    _log = function _log(message) {\n  return console && console.warn(message);\n},\n    _bonusValidated = 1,\n    //<name>MorphSVGPlugin</name>\n_getAverageXY = function _getAverageXY(segment) {\n  var l = segment.length,\n      x = 0,\n      y = 0,\n      i;\n\n  for (i = 0; i < l; i++) {\n    x += segment[i++];\n    y += segment[i];\n  }\n\n  return [x / (l / 2), y / (l / 2)];\n},\n    _getSize = function _getSize(segment) {\n  //rough estimate of the bounding box (based solely on the anchors) of a single segment. sets \"size\", \"centerX\", and \"centerY\" properties on the bezier array itself, and returns the size (width * height)\n  var l = segment.length,\n      xMax = segment[0],\n      xMin = xMax,\n      yMax = segment[1],\n      yMin = yMax,\n      x,\n      y,\n      i;\n\n  for (i = 6; i < l; i += 6) {\n    x = segment[i];\n    y = segment[i + 1];\n\n    if (x > xMax) {\n      xMax = x;\n    } else if (x < xMin) {\n      xMin = x;\n    }\n\n    if (y > yMax) {\n      yMax = y;\n    } else if (y < yMin) {\n      yMin = y;\n    }\n  }\n\n  segment.centerX = (xMax + xMin) / 2;\n  segment.centerY = (yMax + yMin) / 2;\n  return segment.size = (xMax - xMin) * (yMax - yMin);\n},\n    _getTotalSize = function _getTotalSize(rawPath, samplesPerBezier) {\n  if (samplesPerBezier === void 0) {\n    samplesPerBezier = 3;\n  }\n\n  //rough estimate of the bounding box of the entire list of Bezier segments (based solely on the anchors). sets \"size\", \"centerX\", and \"centerY\" properties on the bezier array itself, and returns the size (width * height)\n  var j = rawPath.length,\n      xMax = rawPath[0][0],\n      xMin = xMax,\n      yMax = rawPath[0][1],\n      yMin = yMax,\n      inc = 1 / samplesPerBezier,\n      l,\n      x,\n      y,\n      i,\n      segment,\n      k,\n      t,\n      inv,\n      x1,\n      y1,\n      x2,\n      x3,\n      x4,\n      y2,\n      y3,\n      y4;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    l = segment.length;\n\n    for (i = 6; i < l; i += 6) {\n      x1 = segment[i];\n      y1 = segment[i + 1];\n      x2 = segment[i + 2] - x1;\n      y2 = segment[i + 3] - y1;\n      x3 = segment[i + 4] - x1;\n      y3 = segment[i + 5] - y1;\n      x4 = segment[i + 6] - x1;\n      y4 = segment[i + 7] - y1;\n      k = samplesPerBezier;\n\n      while (--k > -1) {\n        t = inc * k;\n        inv = 1 - t;\n        x = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t + x1;\n        y = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t + y1;\n\n        if (x > xMax) {\n          xMax = x;\n        } else if (x < xMin) {\n          xMin = x;\n        }\n\n        if (y > yMax) {\n          yMax = y;\n        } else if (y < yMin) {\n          yMin = y;\n        }\n      }\n    }\n  }\n\n  rawPath.centerX = (xMax + xMin) / 2;\n  rawPath.centerY = (yMax + yMin) / 2;\n  rawPath.left = xMin;\n  rawPath.width = xMax - xMin;\n  rawPath.top = yMin;\n  rawPath.height = yMax - yMin;\n  return rawPath.size = (xMax - xMin) * (yMax - yMin);\n},\n    _sortByComplexity = function _sortByComplexity(a, b) {\n  return b.length - a.length;\n},\n    _sortBySize = function _sortBySize(a, b) {\n  var sizeA = a.size || _getSize(a),\n      sizeB = b.size || _getSize(b);\n\n  return Math.abs(sizeB - sizeA) < (sizeA + sizeB) / 20 ? b.centerX - a.centerX || b.centerY - a.centerY : sizeB - sizeA; //if the size is within 10% of each other, prioritize position from left to right, then top to bottom.\n},\n    _offsetSegment = function _offsetSegment(segment, shapeIndex) {\n  var a = segment.slice(0),\n      l = segment.length,\n      wrap = l - 2,\n      i,\n      index;\n  shapeIndex = shapeIndex | 0;\n\n  for (i = 0; i < l; i++) {\n    index = (i + shapeIndex) % wrap;\n    segment[i++] = a[index];\n    segment[i] = a[index + 1];\n  }\n},\n    _getTotalMovement = function _getTotalMovement(sb, eb, shapeIndex, offsetX, offsetY) {\n  var l = sb.length,\n      d = 0,\n      wrap = l - 2,\n      index,\n      i,\n      x,\n      y;\n  shapeIndex *= 6;\n\n  for (i = 0; i < l; i += 6) {\n    index = (i + shapeIndex) % wrap;\n    y = sb[index] - (eb[i] - offsetX);\n    x = sb[index + 1] - (eb[i + 1] - offsetY);\n    d += _sqrt(x * x + y * y);\n  }\n\n  return d;\n},\n    _getClosestShapeIndex = function _getClosestShapeIndex(sb, eb, checkReverse) {\n  //finds the index in a closed cubic bezier array that's closest to the angle provided (angle measured from the center or average x/y).\n  var l = sb.length,\n      sCenter = _getAverageXY(sb),\n      //when comparing distances, adjust the coordinates as if the shapes are centered with each other.\n  eCenter = _getAverageXY(eb),\n      offsetX = eCenter[0] - sCenter[0],\n      offsetY = eCenter[1] - sCenter[1],\n      min = _getTotalMovement(sb, eb, 0, offsetX, offsetY),\n      minIndex = 0,\n      copy,\n      d,\n      i;\n\n  for (i = 6; i < l; i += 6) {\n    d = _getTotalMovement(sb, eb, i / 6, offsetX, offsetY);\n\n    if (d < min) {\n      min = d;\n      minIndex = i;\n    }\n  }\n\n  if (checkReverse) {\n    copy = sb.slice(0);\n    reverseSegment(copy);\n\n    for (i = 6; i < l; i += 6) {\n      d = _getTotalMovement(copy, eb, i / 6, offsetX, offsetY);\n\n      if (d < min) {\n        min = d;\n        minIndex = -i;\n      }\n    }\n  }\n\n  return minIndex / 6;\n},\n    _getClosestAnchor = function _getClosestAnchor(rawPath, x, y) {\n  //finds the x/y of the anchor that's closest to the provided x/y coordinate (returns an array, like [x, y]). The bezier should be the top-level type that contains an array for each segment.\n  var j = rawPath.length,\n      closestDistance = _bigNum,\n      closestX = 0,\n      closestY = 0,\n      segment,\n      dx,\n      dy,\n      d,\n      i,\n      l;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    l = segment.length;\n\n    for (i = 0; i < l; i += 6) {\n      dx = segment[i] - x;\n      dy = segment[i + 1] - y;\n      d = _sqrt(dx * dx + dy * dy);\n\n      if (d < closestDistance) {\n        closestDistance = d;\n        closestX = segment[i];\n        closestY = segment[i + 1];\n      }\n    }\n  }\n\n  return [closestX, closestY];\n},\n    _getClosestSegment = function _getClosestSegment(bezier, pool, startIndex, sortRatio, offsetX, offsetY) {\n  //matches the bezier to the closest one in a pool (array) of beziers, assuming they are in order of size and we shouldn't drop more than 20% of the size, otherwise prioritizing location (total distance to the center). Extracts the segment out of the pool array and returns it.\n  var l = pool.length,\n      index = 0,\n      minSize = Math.min(bezier.size || _getSize(bezier), pool[startIndex].size || _getSize(pool[startIndex])) * sortRatio,\n      //limit things based on a percentage of the size of either the bezier or the next element in the array, whichever is smaller.\n  min = _bigNum,\n      cx = bezier.centerX + offsetX,\n      cy = bezier.centerY + offsetY,\n      size,\n      i,\n      dx,\n      dy,\n      d;\n\n  for (i = startIndex; i < l; i++) {\n    size = pool[i].size || _getSize(pool[i]);\n\n    if (size < minSize) {\n      break;\n    }\n\n    dx = pool[i].centerX - cx;\n    dy = pool[i].centerY - cy;\n    d = _sqrt(dx * dx + dy * dy);\n\n    if (d < min) {\n      index = i;\n      min = d;\n    }\n  }\n\n  d = pool[index];\n  pool.splice(index, 1);\n  return d;\n},\n    _subdivideSegmentQty = function _subdivideSegmentQty(segment, quantity) {\n  var tally = 0,\n      max = 0.999999,\n      l = segment.length,\n      newPointsPerSegment = quantity / ((l - 2) / 6),\n      ax,\n      ay,\n      cp1x,\n      cp1y,\n      cp2x,\n      cp2y,\n      bx,\n      by,\n      x1,\n      y1,\n      x2,\n      y2,\n      i,\n      t;\n\n  for (i = 2; i < l; i += 6) {\n    tally += newPointsPerSegment;\n\n    while (tally > max) {\n      //compare with 0.99999 instead of 1 in order to prevent rounding errors\n      ax = segment[i - 2];\n      ay = segment[i - 1];\n      cp1x = segment[i];\n      cp1y = segment[i + 1];\n      cp2x = segment[i + 2];\n      cp2y = segment[i + 3];\n      bx = segment[i + 4];\n      by = segment[i + 5];\n      t = 1 / ((Math.floor(tally) || 1) + 1); //progress along the bezier (value between 0 and 1)\n\n      x1 = ax + (cp1x - ax) * t;\n      x2 = cp1x + (cp2x - cp1x) * t;\n      x1 += (x2 - x1) * t;\n      x2 += (cp2x + (bx - cp2x) * t - x2) * t;\n      y1 = ay + (cp1y - ay) * t;\n      y2 = cp1y + (cp2y - cp1y) * t;\n      y1 += (y2 - y1) * t;\n      y2 += (cp2y + (by - cp2y) * t - y2) * t;\n      segment.splice(i, 4, ax + (cp1x - ax) * t, //first control point\n      ay + (cp1y - ay) * t, x1, //second control point\n      y1, x1 + (x2 - x1) * t, //new fabricated anchor on line\n      y1 + (y2 - y1) * t, x2, //third control point\n      y2, cp2x + (bx - cp2x) * t, //fourth control point\n      cp2y + (by - cp2y) * t);\n      i += 6;\n      l += 6;\n      tally--;\n    }\n  }\n\n  return segment;\n},\n    _equalizeSegmentQuantity = function _equalizeSegmentQuantity(start, end, shapeIndex, map, fillSafe) {\n  //returns an array of shape indexes, 1 for each segment.\n  var dif = end.length - start.length,\n      longer = dif > 0 ? end : start,\n      shorter = dif > 0 ? start : end,\n      added = 0,\n      sortMethod = map === \"complexity\" ? _sortByComplexity : _sortBySize,\n      sortRatio = map === \"position\" ? 0 : typeof map === \"number\" ? map : 0.8,\n      i = shorter.length,\n      shapeIndices = typeof shapeIndex === \"object\" && shapeIndex.push ? shapeIndex.slice(0) : [shapeIndex],\n      reverse = shapeIndices[0] === \"reverse\" || shapeIndices[0] < 0,\n      log = shapeIndex === \"log\",\n      eb,\n      sb,\n      b,\n      x,\n      y,\n      offsetX,\n      offsetY;\n\n  if (!shorter[0]) {\n    return;\n  }\n\n  if (longer.length > 1) {\n    start.sort(sortMethod);\n    end.sort(sortMethod);\n    offsetX = longer.size || _getTotalSize(longer); //ensures centerX and centerY are defined (used below).\n\n    offsetX = shorter.size || _getTotalSize(shorter);\n    offsetX = longer.centerX - shorter.centerX;\n    offsetY = longer.centerY - shorter.centerY;\n\n    if (sortMethod === _sortBySize) {\n      for (i = 0; i < shorter.length; i++) {\n        longer.splice(i, 0, _getClosestSegment(shorter[i], longer, i, sortRatio, offsetX, offsetY));\n      }\n    }\n  }\n\n  if (dif) {\n    if (dif < 0) {\n      dif = -dif;\n    }\n\n    if (longer[0].length > shorter[0].length) {\n      //since we use shorter[0] as the one to map the origination point of any brand new fabricated segments, do any subdividing first so that there are more points to choose from (if necessary)\n      _subdivideSegmentQty(shorter[0], (longer[0].length - shorter[0].length) / 6 | 0);\n    }\n\n    i = shorter.length;\n\n    while (added < dif) {\n      x = longer[i].size || _getSize(longer[i]); //just to ensure centerX and centerY are calculated which we use on the next line.\n\n      b = _getClosestAnchor(shorter, longer[i].centerX, longer[i].centerY);\n      x = b[0];\n      y = b[1];\n      shorter[i++] = [x, y, x, y, x, y, x, y];\n      shorter.totalPoints += 8;\n      added++;\n    }\n  }\n\n  for (i = 0; i < start.length; i++) {\n    eb = end[i];\n    sb = start[i];\n    dif = eb.length - sb.length;\n\n    if (dif < 0) {\n      _subdivideSegmentQty(eb, -dif / 6 | 0);\n    } else if (dif > 0) {\n      _subdivideSegmentQty(sb, dif / 6 | 0);\n    }\n\n    if (reverse && fillSafe !== false && !sb.reversed) {\n      reverseSegment(sb);\n    }\n\n    shapeIndex = shapeIndices[i] || shapeIndices[i] === 0 ? shapeIndices[i] : \"auto\";\n\n    if (shapeIndex) {\n      //if start shape is closed, find the closest point to the start/end, and re-organize the bezier points accordingly so that the shape morphs in a more intuitive way.\n      if (sb.closed || Math.abs(sb[0] - sb[sb.length - 2]) < 0.5 && Math.abs(sb[1] - sb[sb.length - 1]) < 0.5) {\n        if (shapeIndex === \"auto\" || shapeIndex === \"log\") {\n          shapeIndices[i] = shapeIndex = _getClosestShapeIndex(sb, eb, !i || fillSafe === false);\n\n          if (shapeIndex < 0) {\n            reverse = true;\n            reverseSegment(sb);\n            shapeIndex = -shapeIndex;\n          }\n\n          _offsetSegment(sb, shapeIndex * 6);\n        } else if (shapeIndex !== \"reverse\") {\n          if (i && shapeIndex < 0) {\n            //only happens if an array is passed as shapeIndex and a negative value is defined for an index beyond 0. Very rare, but helpful sometimes.\n            reverseSegment(sb);\n          }\n\n          _offsetSegment(sb, (shapeIndex < 0 ? -shapeIndex : shapeIndex) * 6);\n        } //otherwise, if it's not a closed shape, consider reversing it if that would make the overall travel less\n\n      } else if (!reverse && (shapeIndex === \"auto\" && Math.abs(eb[0] - sb[0]) + Math.abs(eb[1] - sb[1]) + Math.abs(eb[eb.length - 2] - sb[sb.length - 2]) + Math.abs(eb[eb.length - 1] - sb[sb.length - 1]) > Math.abs(eb[0] - sb[sb.length - 2]) + Math.abs(eb[1] - sb[sb.length - 1]) + Math.abs(eb[eb.length - 2] - sb[0]) + Math.abs(eb[eb.length - 1] - sb[1]) || shapeIndex % 2)) {\n        reverseSegment(sb);\n        shapeIndices[i] = -1;\n        reverse = true;\n      } else if (shapeIndex === \"auto\") {\n        shapeIndices[i] = 0;\n      } else if (shapeIndex === \"reverse\") {\n        shapeIndices[i] = -1;\n      }\n\n      if (sb.closed !== eb.closed) {\n        //if one is closed and one isn't, don't close either one otherwise the tweening will look weird (but remember, the beginning and final states will honor the actual values, so this only affects the inbetween state)\n        sb.closed = eb.closed = false;\n      }\n    }\n  }\n\n  log && _log(\"shapeIndex:[\" + shapeIndices.join(\",\") + \"]\");\n  start.shapeIndex = shapeIndices;\n  return shapeIndices;\n},\n    _pathFilter = function _pathFilter(a, shapeIndex, map, precompile, fillSafe) {\n  var start = stringToRawPath(a[0]),\n      end = stringToRawPath(a[1]);\n\n  if (!_equalizeSegmentQuantity(start, end, shapeIndex || shapeIndex === 0 ? shapeIndex : \"auto\", map, fillSafe)) {\n    return; //malformed path data or null target\n  }\n\n  a[0] = rawPathToString(start);\n  a[1] = rawPathToString(end);\n\n  if (precompile === \"log\" || precompile === true) {\n    _log('precompile:[\"' + a[0] + '\",\"' + a[1] + '\"]');\n  }\n},\n    _offsetPoints = function _offsetPoints(text, offset) {\n  if (!offset) {\n    return text;\n  }\n\n  var a = text.match(_numExp) || [],\n      l = a.length,\n      s = \"\",\n      inc,\n      i,\n      j;\n\n  if (offset === \"reverse\") {\n    i = l - 1;\n    inc = -2;\n  } else {\n    i = ((parseInt(offset, 10) || 0) * 2 + 1 + l * 100) % l;\n    inc = 2;\n  }\n\n  for (j = 0; j < l; j += 2) {\n    s += a[i - 1] + \",\" + a[i] + \" \";\n    i = (i + inc) % l;\n  }\n\n  return s;\n},\n    //adds a certain number of points while maintaining the polygon/polyline shape (so that the start/end values can have a matching quantity of points to animate). Returns the revised string.\n_equalizePointQuantity = function _equalizePointQuantity(a, quantity) {\n  var tally = 0,\n      x = parseFloat(a[0]),\n      y = parseFloat(a[1]),\n      s = x + \",\" + y + \" \",\n      max = 0.999999,\n      newPointsPerSegment,\n      i,\n      l,\n      j,\n      factor,\n      nextX,\n      nextY;\n  l = a.length;\n  newPointsPerSegment = quantity * 0.5 / (l * 0.5 - 1);\n\n  for (i = 0; i < l - 2; i += 2) {\n    tally += newPointsPerSegment;\n    nextX = parseFloat(a[i + 2]);\n    nextY = parseFloat(a[i + 3]);\n\n    if (tally > max) {\n      //compare with 0.99999 instead of 1 in order to prevent rounding errors\n      factor = 1 / (Math.floor(tally) + 1);\n      j = 1;\n\n      while (tally > max) {\n        s += (x + (nextX - x) * factor * j).toFixed(2) + \",\" + (y + (nextY - y) * factor * j).toFixed(2) + \" \";\n        tally--;\n        j++;\n      }\n    }\n\n    s += nextX + \",\" + nextY + \" \";\n    x = nextX;\n    y = nextY;\n  }\n\n  return s;\n},\n    _pointsFilter = function _pointsFilter(a) {\n  var startNums = a[0].match(_numExp) || [],\n      endNums = a[1].match(_numExp) || [],\n      dif = endNums.length - startNums.length;\n\n  if (dif > 0) {\n    a[0] = _equalizePointQuantity(startNums, dif);\n  } else {\n    a[1] = _equalizePointQuantity(endNums, -dif);\n  }\n},\n    _buildPointsFilter = function _buildPointsFilter(shapeIndex) {\n  return !isNaN(shapeIndex) ? function (a) {\n    _pointsFilter(a);\n\n    a[1] = _offsetPoints(a[1], parseInt(shapeIndex, 10));\n  } : _pointsFilter;\n},\n    _parseShape = function _parseShape(shape, forcePath, target) {\n  var isString = typeof shape === \"string\",\n      e,\n      type;\n\n  if (!isString || _selectorExp.test(shape) || (shape.match(_numExp) || []).length < 3) {\n    e = _toArray(shape)[0];\n\n    if (e) {\n      type = (e.nodeName + \"\").toUpperCase();\n\n      if (forcePath && type !== \"PATH\") {\n        //if we were passed an element (or selector text for an element) that isn't a path, convert it.\n        e = _convertToPath(e, false);\n        type = \"PATH\";\n      }\n\n      shape = e.getAttribute(type === \"PATH\" ? \"d\" : \"points\") || \"\";\n\n      if (e === target) {\n        //if the shape matches the target element, the user wants to revert to the original which should have been stored in the data-original attribute\n        shape = e.getAttributeNS(null, \"data-original\") || shape;\n      }\n    } else {\n      _log(\"WARNING: invalid morph to: \" + shape);\n\n      shape = false;\n    }\n  }\n\n  return shape;\n},\n    //adds an \"isSmooth\" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.\n_populateSmoothData = function _populateSmoothData(rawPath, tolerance) {\n  var j = rawPath.length,\n      limit = 0.2 * (tolerance || 1),\n      smooth,\n      segment,\n      x,\n      y,\n      x2,\n      y2,\n      i,\n      l,\n      a,\n      a2,\n      isSmooth,\n      smoothData;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];\n    smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];\n    isSmooth.length = 4;\n    l = segment.length - 2;\n\n    for (i = 6; i < l; i += 6) {\n      x = segment[i] - segment[i - 2];\n      y = segment[i + 1] - segment[i - 1];\n      x2 = segment[i + 2] - segment[i];\n      y2 = segment[i + 3] - segment[i + 1];\n      a = _atan2(y, x);\n      a2 = _atan2(y2, x2);\n      smooth = Math.abs(a - a2) < limit;\n\n      if (smooth) {\n        smoothData[i - 2] = a;\n        smoothData[i + 2] = a2;\n        smoothData[i - 1] = _sqrt(x * x + y * y);\n        smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);\n      }\n\n      isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);\n    } //if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.\n\n\n    if (segment[l] === segment[0] && segment[l + 1] === segment[1]) {\n      x = segment[0] - segment[l - 2];\n      y = segment[1] - segment[l - 1];\n      x2 = segment[2] - segment[0];\n      y2 = segment[3] - segment[1];\n      a = _atan2(y, x);\n      a2 = _atan2(y2, x2);\n\n      if (Math.abs(a - a2) < limit) {\n        smoothData[l - 2] = a;\n        smoothData[2] = a2;\n        smoothData[l - 1] = _sqrt(x * x + y * y);\n        smoothData[3] = _sqrt(x2 * x2 + y2 * y2);\n        isSmooth[l - 2] = isSmooth[l - 1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.\n      }\n    }\n  }\n\n  return rawPath;\n},\n    _parseOriginFactors = function _parseOriginFactors(v) {\n  var a = v.trim().split(\" \"),\n      x = ~v.indexOf(\"left\") ? 0 : ~v.indexOf(\"right\") ? 100 : isNaN(parseFloat(a[0])) ? 50 : parseFloat(a[0]),\n      y = ~v.indexOf(\"top\") ? 0 : ~v.indexOf(\"bottom\") ? 100 : isNaN(parseFloat(a[1])) ? 50 : parseFloat(a[1]);\n  return {\n    x: x / 100,\n    y: y / 100\n  };\n},\n    _shortAngle = function _shortAngle(dif) {\n  return dif !== dif % _PI ? dif + (dif < 0 ? _2PI : -_2PI) : dif;\n},\n    _morphMessage = \"Use MorphSVGPlugin.convertToPath() to convert to a path before morphing.\",\n    _tweenRotation = function _tweenRotation(start, end, i, linkedPT) {\n  var so = this._origin,\n      //starting origin\n  eo = this._eOrigin,\n      //ending origin\n  dx = start[i] - so.x,\n      dy = start[i + 1] - so.y,\n      d = _sqrt(dx * dx + dy * dy),\n      //length from starting origin to starting point\n  sa = _atan2(dy, dx),\n      angleDif,\n      _short;\n\n  dx = end[i] - eo.x;\n  dy = end[i + 1] - eo.y;\n  angleDif = _atan2(dy, dx) - sa;\n  _short = _shortAngle(angleDif); //in the case of control points, we ALWAYS link them to their anchor so that they don't get torn apart and rotate the opposite direction. If it's not a control point, we look at the most recently linked point as long as they're within a certain rotational range of each other.\n\n  if (!linkedPT && _lastLinkedAnchor && Math.abs(_short + _lastLinkedAnchor.ca) < _angleMin) {\n    linkedPT = _lastLinkedAnchor;\n  }\n\n  return this._anchorPT = _lastLinkedAnchor = {\n    _next: this._anchorPT,\n    t: start,\n    sa: sa,\n    //starting angle\n    ca: linkedPT && _short * linkedPT.ca < 0 && Math.abs(_short) > _angleMax ? angleDif : _short,\n    //change in angle\n    sl: d,\n    //starting length\n    cl: _sqrt(dx * dx + dy * dy) - d,\n    //change in length\n    i: i\n  };\n},\n    _initCore = function _initCore(required) {\n  gsap = _getGSAP();\n  PluginClass = PluginClass || gsap && gsap.plugins.morphSVG;\n\n  if (gsap && PluginClass) {\n    _toArray = gsap.utils.toArray;\n    _doc = document;\n    PluginClass.prototype._tweenRotation = _tweenRotation;\n    _coreInitted = 1;\n  } else if (required) {\n    _log(\"Please gsap.registerPlugin(MorphSVGPlugin)\");\n  }\n};\n\nexport var MorphSVGPlugin = {\n  version: \"3.13.0\",\n  name: \"morphSVG\",\n  rawVars: 1,\n  // otherwise \"render\" would be interpreted as a function-based value.\n  register: function register(core, Plugin) {\n    gsap = core;\n    PluginClass = Plugin;\n\n    _initCore();\n  },\n  init: function init(target, value, tween, index, targets) {\n    _coreInitted || _initCore(1);\n\n    if (!value) {\n      _log(\"invalid shape\");\n\n      return false;\n    }\n\n    _isFunction(value) && (value = value.call(tween, index, target, targets));\n    var type, p, pt, shape, isPoly, shapeIndex, map, startSmooth, endSmooth, start, end, i, j, l, startSeg, endSeg, precompiled, sData, eData, originFactors, useRotation, offset;\n\n    if (typeof value === \"string\" || value.getBBox || value[0]) {\n      value = {\n        shape: value\n      };\n    } else if (typeof value === \"object\") {\n      // if there are any function-based values, parse them here (and make a copy of the object so we're not modifying the original)\n      type = {};\n\n      for (p in value) {\n        type[p] = _isFunction(value[p]) && p !== \"render\" ? value[p].call(tween, index, target, targets) : value[p];\n      }\n\n      value = type;\n    }\n\n    var cs = target.nodeType ? window.getComputedStyle(target) : {},\n        fill = cs.fill + \"\",\n        fillSafe = !(fill === \"none\" || (fill.match(_numExp) || [])[3] === \"0\" || cs.fillRule === \"evenodd\"),\n        origins = (value.origin || \"50 50\").split(\",\");\n    type = (target.nodeName + \"\").toUpperCase();\n    isPoly = type === \"POLYLINE\" || type === \"POLYGON\";\n\n    if (type !== \"PATH\" && !isPoly && !value.prop) {\n      _log(\"Cannot morph a <\" + type + \"> element. \" + _morphMessage);\n\n      return false;\n    }\n\n    p = type === \"PATH\" ? \"d\" : \"points\";\n\n    if (!value.prop && !_isFunction(target.setAttribute)) {\n      return false;\n    }\n\n    shape = _parseShape(value.shape || value.d || value.points || \"\", p === \"d\", target);\n\n    if (isPoly && _commands.test(shape)) {\n      _log(\"A <\" + type + \"> cannot accept path data. \" + _morphMessage);\n\n      return false;\n    }\n\n    shapeIndex = value.shapeIndex || value.shapeIndex === 0 ? value.shapeIndex : \"auto\";\n    map = value.map || MorphSVGPlugin.defaultMap;\n    this._prop = value.prop;\n    this._render = value.render || MorphSVGPlugin.defaultRender;\n    this._apply = \"updateTarget\" in value ? value.updateTarget : MorphSVGPlugin.defaultUpdateTarget;\n    this._rnd = Math.pow(10, isNaN(value.precision) ? 2 : +value.precision);\n    this._tween = tween;\n\n    if (shape) {\n      this._target = target;\n      precompiled = typeof value.precompile === \"object\";\n      start = this._prop ? target[this._prop] : target.getAttribute(p);\n\n      if (!this._prop && !target.getAttributeNS(null, \"data-original\")) {\n        target.setAttributeNS(null, \"data-original\", start); //record the original state in a data-original attribute so that we can revert to it later.\n      }\n\n      if (p === \"d\" || this._prop) {\n        start = stringToRawPath(precompiled ? value.precompile[0] : start);\n        end = stringToRawPath(precompiled ? value.precompile[1] : shape);\n\n        if (!precompiled && !_equalizeSegmentQuantity(start, end, shapeIndex, map, fillSafe)) {\n          return false; //malformed path data or null target\n        }\n\n        if (value.precompile === \"log\" || value.precompile === true) {\n          _log('precompile:[\"' + rawPathToString(start) + '\",\"' + rawPathToString(end) + '\"]');\n        }\n\n        useRotation = (value.type || MorphSVGPlugin.defaultType) !== \"linear\";\n\n        if (useRotation) {\n          start = _populateSmoothData(start, value.smoothTolerance);\n          end = _populateSmoothData(end, value.smoothTolerance);\n\n          if (!start.size) {\n            _getTotalSize(start); //adds top/left/width/height values\n\n          }\n\n          if (!end.size) {\n            _getTotalSize(end);\n          }\n\n          originFactors = _parseOriginFactors(origins[0]);\n          this._origin = start.origin = {\n            x: start.left + originFactors.x * start.width,\n            y: start.top + originFactors.y * start.height\n          };\n\n          if (origins[1]) {\n            originFactors = _parseOriginFactors(origins[1]);\n          }\n\n          this._eOrigin = {\n            x: end.left + originFactors.x * end.width,\n            y: end.top + originFactors.y * end.height\n          };\n        }\n\n        this._rawPath = target._gsRawPath = start;\n        j = start.length;\n\n        while (--j > -1) {\n          startSeg = start[j];\n          endSeg = end[j];\n          startSmooth = startSeg.isSmooth || [];\n          endSmooth = endSeg.isSmooth || [];\n          l = startSeg.length;\n          _lastLinkedAnchor = 0; //reset; we use _lastLinkedAnchor in the _tweenRotation() method to help make sure that close points don't get ripped apart and rotate opposite directions. Typically we want to go the shortest direction, but if the previous anchor is going a different direction, we override this logic (within certain thresholds)\n\n          for (i = 0; i < l; i += 2) {\n            if (endSeg[i] !== startSeg[i] || endSeg[i + 1] !== startSeg[i + 1]) {\n              if (useRotation) {\n                if (startSmooth[i] && endSmooth[i]) {\n                  //if BOTH starting and ending values are smooth (meaning control points have basically the same slope), interpolate the rotation and length instead of the coordinates (this is what makes things smooth).\n                  sData = startSeg.smoothData;\n                  eData = endSeg.smoothData;\n                  offset = i + (i === l - 4 ? 7 - l : 5); //helps us accommodate wrapping (like if the end and start anchors are identical and the control points are smooth).\n\n                  this._controlPT = {\n                    _next: this._controlPT,\n                    i: i,\n                    j: j,\n                    l1s: sData[i + 1],\n                    l1c: eData[i + 1] - sData[i + 1],\n                    l2s: sData[offset],\n                    l2c: eData[offset] - sData[offset]\n                  };\n                  pt = this._tweenRotation(startSeg, endSeg, i + 2);\n\n                  this._tweenRotation(startSeg, endSeg, i, pt);\n\n                  this._tweenRotation(startSeg, endSeg, offset - 1, pt);\n\n                  i += 4;\n                } else {\n                  this._tweenRotation(startSeg, endSeg, i);\n                }\n              } else {\n                pt = this.add(startSeg, i, startSeg[i], endSeg[i], 0, 0, 0, 0, 0, 1);\n                pt = this.add(startSeg, i + 1, startSeg[i + 1], endSeg[i + 1], 0, 0, 0, 0, 0, 1) || pt;\n              }\n            }\n          }\n        }\n      } else {\n        pt = this.add(target, \"setAttribute\", target.getAttribute(p) + \"\", shape + \"\", index, targets, 0, _buildPointsFilter(shapeIndex), p);\n      }\n\n      if (useRotation) {\n        this.add(this._origin, \"x\", this._origin.x, this._eOrigin.x, 0, 0, 0, 0, 0, 1);\n        pt = this.add(this._origin, \"y\", this._origin.y, this._eOrigin.y, 0, 0, 0, 0, 0, 1);\n      }\n\n      if (pt) {\n        this._props.push(\"morphSVG\");\n\n        pt.end = shape;\n        pt.endProp = p;\n      }\n    }\n\n    return _bonusValidated;\n  },\n  render: function render(ratio, data) {\n    var rawPath = data._rawPath,\n        controlPT = data._controlPT,\n        anchorPT = data._anchorPT,\n        rnd = data._rnd,\n        target = data._target,\n        pt = data._pt,\n        s,\n        space,\n        easeInOut,\n        segment,\n        l,\n        angle,\n        i,\n        j,\n        x,\n        y,\n        sin,\n        cos,\n        offset;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n\n    if (ratio === 1 && data._apply) {\n      pt = data._pt;\n\n      while (pt) {\n        if (pt.end) {\n          if (data._prop) {\n            target[data._prop] = pt.end;\n          } else {\n            target.setAttribute(pt.endProp, pt.end); //make sure the end value is exactly as specified (in case we had to add fabricated points during the tween)\n          }\n        }\n\n        pt = pt._next;\n      }\n    } else if (rawPath) {\n      //rotationally position the anchors\n      while (anchorPT) {\n        angle = anchorPT.sa + ratio * anchorPT.ca;\n        l = anchorPT.sl + ratio * anchorPT.cl; //length\n\n        anchorPT.t[anchorPT.i] = data._origin.x + _cos(angle) * l;\n        anchorPT.t[anchorPT.i + 1] = data._origin.y + _sin(angle) * l;\n        anchorPT = anchorPT._next;\n      } //smooth out the control points\n\n\n      easeInOut = ratio < 0.5 ? 2 * ratio * ratio : (4 - 2 * ratio) * ratio - 1;\n\n      while (controlPT) {\n        i = controlPT.i;\n        segment = rawPath[controlPT.j];\n        offset = i + (i === segment.length - 4 ? 7 - segment.length : 5); //accommodates wrapping around of smooth points, like if the start and end anchors are on top of each other and their handles are smooth.\n\n        angle = _atan2(segment[offset] - segment[i + 1], segment[offset - 1] - segment[i]); //average the angles\n\n        sin = _sin(angle);\n        cos = _cos(angle);\n        x = segment[i + 2];\n        y = segment[i + 3];\n        l = controlPT.l1s + easeInOut * controlPT.l1c; //length\n\n        segment[i] = x - cos * l;\n        segment[i + 1] = y - sin * l;\n        l = controlPT.l2s + easeInOut * controlPT.l2c;\n        segment[offset - 1] = x + cos * l;\n        segment[offset] = y + sin * l;\n        controlPT = controlPT._next;\n      }\n\n      target._gsRawPath = rawPath;\n\n      if (data._apply) {\n        s = \"\";\n        space = \" \";\n\n        for (j = 0; j < rawPath.length; j++) {\n          segment = rawPath[j];\n          l = segment.length;\n          s += \"M\" + (segment[0] * rnd | 0) / rnd + space + (segment[1] * rnd | 0) / rnd + \" C\";\n\n          for (i = 2; i < l; i++) {\n            //this is actually faster than just doing a join() on the array, possibly because the numbers have so many decimal places\n            s += (segment[i] * rnd | 0) / rnd + space;\n          }\n        }\n\n        if (data._prop) {\n          target[data._prop] = s;\n        } else {\n          target.setAttribute(\"d\", s);\n        }\n      }\n    }\n\n    data._render && rawPath && data._render.call(data._tween, rawPath, target);\n  },\n  kill: function kill(property) {\n    this._pt = this._rawPath = 0;\n  },\n  getRawPath: getRawPath,\n  stringToRawPath: stringToRawPath,\n  rawPathToString: rawPathToString,\n  normalizeStrings: function normalizeStrings(shape1, shape2, _ref) {\n    var shapeIndex = _ref.shapeIndex,\n        map = _ref.map;\n    var result = [shape1, shape2];\n\n    _pathFilter(result, shapeIndex, map);\n\n    return result;\n  },\n  pathFilter: _pathFilter,\n  pointsFilter: _pointsFilter,\n  getTotalSize: _getTotalSize,\n  equalizeSegmentQuantity: _equalizeSegmentQuantity,\n  convertToPath: function convertToPath(targets, swap) {\n    return _toArray(targets).map(function (target) {\n      return _convertToPath(target, swap !== false);\n    });\n  },\n  defaultType: \"linear\",\n  defaultUpdateTarget: true,\n  defaultMap: \"size\"\n};\n_getGSAP() && gsap.registerPlugin(MorphSVGPlugin);\nexport { MorphSVGPlugin as default };","import { gsap } from \"gsap\";\r\nimport { MorphSVGPlugin } from \"gsap/MorphSVGPlugin\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst NotFound = () => {\r\n  const yetiTL = useRef(null);\r\n  const chatterTL = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Load GSAP only on client side\r\n    if (typeof window !== \"undefined\") {\r\n      gsap.registerPlugin(MorphSVGPlugin);\r\n\r\n      // Animation setup\r\n      setupAnimations(gsap);\r\n    }\r\n\r\n    return () => {\r\n      // Clean up animations when component unmounts\r\n      if (yetiTL.current) yetiTL.current.kill();\r\n      if (chatterTL.current) chatterTL.current.kill();\r\n    };\r\n  }, []);\r\n\r\n  const setupAnimations = (gsap) => {\r\n    // No need to destructure TweenMax or TimelineMax - just use gsap directly\r\n    const goDark = () => {\r\n      gsap.set(\"#light\", { visibility: \"hidden\" });\r\n      gsap.set(\".hlFur\", { fill: \"#67b1e0\" });\r\n      gsap.set(\".hlSkin\", { fill: \"#88c9f2\" });\r\n    };\r\n\r\n    const goLight = () => {\r\n      gsap.set(\"#light\", { visibility: \"visible\" });\r\n      gsap.set(\".hlFur\", { fill: \"#FFF\" });\r\n      gsap.set(\".hlSkin\", { fill: \"#ddf1fa\" });\r\n    };\r\n    // Mouth shapes\r\n    const mouthShape1 =\r\n      \"M149 115.7c-4.6 3.7-6.6 9.8-5 15.6.1.5.3 1.1.5 1.6.6 1.5 2.4 2.3 3.9 1.7l11.2-4.4 11.2-4.4c1.5-.6 2.3-2.4 1.7-3.9-.2-.5-.4-1-.7-1.5-2.8-5.2-8.4-8.3-14.1-7.9-3.7.2-5.9 1.1-8.7 3.2z\";\r\n    const mouthShape4 =\r\n      \"M149.2 116.7c-4.6 3.7-6.7 8.8-5.2 14.6.1.3.1.5.2.8.6 1.5 2.4 2.3 3.9 1.7l11.2-4.4 11.2-4.4c1.5-.6 2.3-2.4 1.7-3.9-.1-.3-.2-.5-.4-.7-2.8-5.2-8.2-7.2-14-6.9-3.6.2-5.9 1.1-8.6 3.2z\";\r\n\r\n    // Chatter animation\r\n    chatterTL.current = gsap.timeline({ paused: true, repeat: -1, yoyo: true });\r\n    chatterTL.current\r\n      .to(\r\n        [\"#mouthBG\", \"#mouthPath\", \"#mouthOutline\"],\r\n        {\r\n          duration: 0.1,\r\n          morphSVG: mouthShape4,\r\n        },\r\n        \"0\"\r\n      )\r\n      .to(\r\n        \"#chin\",\r\n        {\r\n          duration: 0.1,\r\n          y: 1.5,\r\n        },\r\n        \"0\"\r\n      );\r\n\r\n    // Main Yeti animation\r\n    yetiTL.current = gsap.timeline({ paused: true, repeat: -1 });\r\n    yetiTL.current\r\n      .add(() => chatterTL.current.play(), \"0\")\r\n      .to(\r\n        [\"#armL\", \"#flashlightFront\"],\r\n        {\r\n          duration: 0.075,\r\n          x: 7,\r\n        },\r\n        \"2.5\"\r\n      )\r\n      .to(\r\n        [\"#armL\", \"#flashlightFront\"],\r\n        {\r\n          duration: 0.075,\r\n          x: 0,\r\n        },\r\n        \"2.575\"\r\n      )\r\n      .to(\r\n        [\"#armL\", \"#flashlightFront\"],\r\n        {\r\n          duration: 0.075,\r\n          x: 7,\r\n        },\r\n        \"2.65\"\r\n      )\r\n      .to(\r\n        [\"#armL\", \"#flashlightFront\"],\r\n        {\r\n          duration: 0.075,\r\n          x: 0,\r\n        },\r\n        \"2.725\"\r\n      )\r\n      .to(\r\n        [\"#armL\", \"#flashlightFront\"],\r\n        {\r\n          duration: 0.075,\r\n          x: 7,\r\n        },\r\n        \"2.8\"\r\n      )\r\n      .to(\r\n        [\"#armL\", \"#flashlightFront\"],\r\n        {\r\n          duration: 0.075,\r\n          x: 0,\r\n        },\r\n        \"2.875\"\r\n      )\r\n      .add(goLight, \"3.2\")\r\n      .add(goDark, \"3.3\")\r\n      .add(goLight, \"3.4\")\r\n      .add(() => {\r\n        chatterTL.current.pause();\r\n        gsap.to([\"#mouthBG\", \"#mouthPath\", \"#mouthOutline\"], {\r\n          duration: 0.1,\r\n          morphSVG: mouthShape1,\r\n        });\r\n      }, \"3.2\")\r\n      .play();\r\n\r\n    // Light/dark functions\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-[#09334f] relative overflow-hidden\">\r\n      <Helmet>\r\n        <title>404 - Page Not Found</title>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js\"></script>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/MorphSVGPlugin.min.js\"></script>\r\n      </Helmet>\r\n\r\n      {/* Yeti SVG */}\r\n      <svg\r\n        id=\"yetiSVG\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n        viewBox=\"0 0 600 470\"\r\n        className=\"w-[600px] h-[470px] absolute top-0 left-0 overflow-hidden\"\r\n      >\r\n        <linearGradient\r\n          id=\"flashlightGrad\"\r\n          x1=\"126.5842\"\r\n          x2=\"90.5842\"\r\n          y1=\"176.5625\"\r\n          y2=\"213.5625\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop offset=\"0\" stopColor=\"#333\" />\r\n          <stop offset=\".076\" stopColor=\"#414141\" />\r\n          <stop offset=\".2213\" stopColor=\"#555\" />\r\n          <stop offset=\".3651\" stopColor=\"#626262\" />\r\n          <stop offset=\".5043\" stopColor=\"#666\" />\r\n          <stop offset=\".6323\" stopColor=\"#606060\" />\r\n          <stop offset=\".8063\" stopColor=\"#4e4e4e\" />\r\n          <stop offset=\"1\" stopColor=\"#333\" />\r\n        </linearGradient>\r\n        <path fill=\"#24658F\" d=\"M0 0h600v470H0z\" />\r\n        <g id=\"pillow\">\r\n          <path\r\n            fill=\"#09334F\"\r\n            d=\"M241.3 124.6c-52.9 28.6-112.6 48-181.8 54.4-40.9 6.8-64.6-82.3-31.9-106.6C84 43.8 144.8 26.2 209.4 18c32.8 13 48.5 75.3 31.9 106.6z\"\r\n          />\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"#001726\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M52.8 91.3c10 7.4 25.4 50.7 16.1 65.8M241.3 124.6c-52.9 28.6-112.6 48-181.8 54.4-40.9 6.8-64.6-82.3-31.9-106.6C84 43.8 144.8 26.2 209.4 18c32.8 13 48.5 75.3 31.9 106.6z\"\r\n          />\r\n          <path\r\n            fill=\"#09334F\"\r\n            stroke=\"#001726\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M201.9 21.9c4.9-8 14.1-11.3 20.6-7.3s7.7 13.7 2.8 21.7\"\r\n          />\r\n          <path\r\n            fill=\"#09334F\"\r\n            stroke=\"#001726\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M242.1 103.1c1.8.3 3.6.9 5.3 1.8 8.4 4.1 12.6 13 9.3 19.8s-12.9 9-21.3 4.9c-1.9-.9-3.6-2.1-5-3.4\"\r\n          />\r\n          <path\r\n            fill=\"#09334F\"\r\n            stroke=\"#001726\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M70.3 172c.2 1.4.2 2.8.1 4.3-.8 9.4-8.3 16.4-16.7 15.6S39.2 183 40 173.7c.1-1.6.5-3.1 1-4.5\"\r\n          />\r\n          <path\r\n            fill=\"#09334F\"\r\n            stroke=\"#001726\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M20.9 85.1c-4.1-5-5.1-11.6-2.1-16.9 4.1-7.2 14-9.2 22.1-4.6 3.7 2.1 6.4 5.2 7.9 8.6\"\r\n          />\r\n        </g>\r\n        <g id=\"yeti\">\r\n          <path\r\n            id=\"bodyBG\"\r\n            fill=\"#67B1E0\"\r\n            d=\"M80.9 291.4l-17.1-72.8c-6.3-27 10.4-54 37.4-60.3l93.1-29.6c26.5-8.1 54.6 6.8 62.7 33.3l21.9 71.5\"\r\n          />\r\n          <path\r\n            className=\"hlFur\"\r\n            id=\"hlBody\"\r\n            fill=\"#FFF\"\r\n            d=\"M67.1 232.7c15.6-8.7 27.7-23.7 38-38.7 5.5-8 10.9-16.4 18.3-22.7 13.1-11.2 31.3-14.8 48.6-15 4.9 0 9.9.1 14.5-1.7 3.6-1.5 6.5-4.1 9.3-6.9 6.5-6.5 12-14 18-21-6.4-.6-12.9 0-19.4 2l-93.1 29.6c-27 6.3-43.7 33.4-37.4 60.3l3.2 14.1z\"\r\n          />\r\n          <path\r\n            id=\"bodyOutline\"\r\n            fill=\"none\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M80.9 291.4l-17.1-72.8c-6.3-27 10.4-54 37.4-60.3l93.1-29.6c26.5-8.1 54.6 6.8 62.7 33.3l21.9 71.5\"\r\n          />\r\n          <path\r\n            fill=\"#67B1E0\"\r\n            d=\"M197.5 132.4l-11.2-47.9c-6.3-26.7-32.7-44.1-59.5-38.2-27.4 6-44.5 33.1-38.1 60.3l13.6 56.2\"\r\n          />\r\n          <path\r\n            className=\"hlFur\"\r\n            id=\"hlHead\"\r\n            fill=\"#FFF\"\r\n            d=\"M100.4 132.3l7.4 29.8 89.7-28.8-11.4-48.9c-1.6-6.8-4.5-12.9-8.4-18.3-9.6-7.9-28.5-12.9-46.9-8.5-24.9 5.9-34.5 23.6-38.1 37.9-.8.8-3.8 3-5.1 5.4.2 1.9.5 3.7 1 5.6l7 28.8 4.8-3z\"\r\n          />\r\n          <path\r\n            fill=\"#67B1E0\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M182.1 71.6c3.8 3.6 7 7.7 9.5 12-1.8.4-3.6.9-5.3 1.6 3.2 2.9 5.7 6.3 7.6 9.9-1.1.3-2.2.7-3.3 1.1 2.5 3.5 4.3 7.4 5.4 11.5-.8-.5-2.2-.8-3.3-1\"\r\n          />\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M197.5 132.4l-11.2-47.9c-6.3-26.7-32.7-44.1-59.5-38.2-27.4 6-44.5 33.1-38.1 60.3l13.6 56.2\"\r\n          />\r\n          <g>\r\n            <ellipse\r\n              cx=\"85.8\"\r\n              cy=\"120.4\"\r\n              fill=\"#88C9F2\"\r\n              rx=\"11.5\"\r\n              ry=\"11.5\"\r\n              transform=\"rotate(-66.265 85.7992 120.4318)\"\r\n            />\r\n            <path\r\n              className=\"hlSkin\"\r\n              id=\"hlEar\"\r\n              fill=\"#DDF1FA\"\r\n              d=\"M80.4 122.2c-1.3-5.5 1.6-11.1 6.6-13.2-1.3-.1-2.6-.1-3.9.3-6.2 1.5-10 7.7-8.5 13.9s7.7 10 13.9 8.5c.7-.2 1.3-.4 1.9-.6-4.7-.6-8.9-4-10-8.9z\"\r\n            />\r\n            <path\r\n              fill=\"#88C9F2\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M84.2 116.6c-2.2.5-3.6 2.8-3 5 .5 2.2 2.8 3.6 5 3\"\r\n            />\r\n            <ellipse\r\n              cx=\"85.8\"\r\n              cy=\"120.4\"\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeWidth=\"2.5\"\r\n              rx=\"11.5\"\r\n              ry=\"11.5\"\r\n              transform=\"rotate(-66.265 85.7992 120.4318)\"\r\n            />\r\n            <path\r\n              className=\"hlFur\"\r\n              fill=\"#FFF\"\r\n              d=\"M106 130.3l-12 3.6 1.2-11.4-6.3-.1 6-12h-5.4l9.6-8.4z\"\r\n            />\r\n            <path\r\n              className=\"hlFur\"\r\n              fill=\"#FFF\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M92.1 96.4c-5.1 5.9-8.4 11.7-10 17 4.2-1.2 8.5-2.2 12.8-3-4.2 4.8-6.7 9.5-7.6 13.8 2.7-.7 5.4-1.3 8-1.7-2.3 4.8-2.8 9.2-1.7 13.3 1.4-1 4-2.4 6.1-3.4\"\r\n            />\r\n          </g>\r\n          <path\r\n            className=\"hlSkin\"\r\n            id=\"face\"\r\n            fill=\"#DDF1FA\"\r\n            d=\"M169.1 70.4l7.3 23.4c9.4 26.8-1.8 45-20 50.7s-37.8-5.1-45.8-30.1L103.3 91\"\r\n          />\r\n          <path\r\n            id=\"chin\"\r\n            fill=\"none\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M152.4 147.5c3.8 1 8 1.4 12.3 1.1-.5-1.4-1-2.9-1.6-4.3 3.8.6 7.9.7 12.1.1l-3.3-4.8c3.1-.6 6.3-1.6 9.5-3.1-1.4-1.6-2.8-3.1-4.2-4.6\"\r\n          />\r\n          <path\r\n            className=\"hlFur\"\r\n            id=\"eyebrow\"\r\n            fill=\"#FFF\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M100.9 89.8c7.6 3.5 15.9 6.1 24.7 7.7 1.1-3.3 2.1-6.6 3-9.9 5.5 2.3 11.3 4.1 17.5 5.4.2-3.3.4-6.5.4-9.7 4.5.7 9.2 1.1 14 1.1-.5-3.4-1.1-6.7-1.7-10 4.5-1.9 9-4.2 13.3-6.9\"\r\n          />\r\n          <g id=\"eyeL\">\r\n            <circle cx=\"135.9\" cy=\"105.3\" r=\"3.5\" fill=\"#265D85\" />\r\n            <circle cx=\"133.7\" cy=\"103.5\" r=\"1\" fill=\"#FFF\" />\r\n          </g>\r\n          <g id=\"eyeR\">\r\n            <circle cx=\"163.2\" cy=\"96.3\" r=\"3.5\" fill=\"#265D85\" />\r\n            <circle cx=\"160.9\" cy=\"94.5\" r=\"1\" fill=\"#FFF\" />\r\n          </g>\r\n          <path\r\n            id=\"nose\"\r\n            fill=\"#265D85\"\r\n            d=\"M149.3 101.2l4.4-1.6c1.8-.6 3.6 1 3.1 2.9l-1.1 3.9c-.4 1.6-2.3 2.2-3.6 1.3l-3.3-2.3c-1.7-1.1-1.3-3.5.5-4.2z\"\r\n          />\r\n          <path\r\n            fill=\"#67B1E0\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M112.4 55.9c.9-4.3 3.8-9.2 8.8-13.7 1.4 2.3 2.8 4.7 4.1 7.1 2.3-4.8 6.9-9.8 13.8-14.1-.1 3.4-.3 6.8-.6 10.1 4.4-3 10.2-5.7 17.3-7.6-1.7 3.6-3.7 7.2-5.9 10.8\"\r\n          />\r\n          <g id=\"mouth\">\r\n            <path\r\n              id=\"mouthBG\"\r\n              fill=\"#265D85\"\r\n              d=\"M149 115.7c-4.6 3.7-6.6 9.8-5 15.6.1.5.3 1.1.5 1.6.6 1.5 2.4 2.3 3.9 1.7l11.2-4.4 11.2-4.4c1.5-.6 2.3-2.4 1.7-3.9-.2-.5-.4-1-.7-1.5-2.8-5.2-8.4-8.3-14.1-7.9-3.7.2-5.9 1.1-8.7 3.2z\"\r\n            />\r\n            <g>\r\n              <defs>\r\n                <path\r\n                  id=\"mouthPath\"\r\n                  d=\"M149 115.7c-4.6 3.7-6.6 9.8-5 15.6.1.5.3 1.1.5 1.6.6 1.5 2.4 2.3 3.9 1.7l11.2-4.4 11.2-4.4c1.5-.6 2.3-2.4 1.7-3.9-.2-.5-.4-1-.7-1.5-2.8-5.2-8.4-8.3-14.1-7.9-3.7.2-5.9 1.1-8.7 3.2z\"\r\n                />\r\n              </defs>\r\n              <clipPath id=\"mouthClipPath\">\r\n                <use overflow=\"visible\" xlinkHref=\"#mouthPath\" />\r\n              </clipPath>\r\n              <g clipPath=\"url(#mouthClipPath)\">\r\n                <ellipse\r\n                  cx=\"160.8\"\r\n                  cy=\"133.2\"\r\n                  fill=\"#CC4A6C\"\r\n                  rx=\"13\"\r\n                  ry=\"8\"\r\n                  transform=\"rotate(-21.685 160.775 133.1613)\"\r\n                />\r\n                <ellipse\r\n                  cx=\"158.4\"\r\n                  cy=\"127.1\"\r\n                  fill=\"#FFF\"\r\n                  opacity=\".1\"\r\n                  rx=\"5\"\r\n                  ry=\"1.5\"\r\n                  transform=\"rotate(-21.685 158.3808 127.126)\"\r\n                />\r\n                <path\r\n                  id=\"tooth1\"\r\n                  fill=\"#FFF\"\r\n                  d=\"M161.5 116.1l-3.7 1.5c-1 .4-2.2-.1-2.6-1.1l-1.5-3.7 7.4-3 1.5 3.7c.5 1 0 2.2-1.1 2.6z\"\r\n                />\r\n                <path\r\n                  id=\"tooth2\"\r\n                  fill=\"#FFF\"\r\n                  d=\"M151.8 128.9l-1.9.7c-1 .4-1.5 1.6-1.1 2.6l1.1 2.8 5.6-2.2-1.1-2.8c-.5-1-1.6-1.5-2.6-1.1z\"\r\n                />\r\n                <path\r\n                  id=\"tooth3\"\r\n                  fill=\"#FFF\"\r\n                  d=\"M158.3 126.3l-1.9.7c-1 .4-1.5 1.6-1.1 2.6l1.1 2.8 5.6-2.2-1.1-2.8c-.5-1-1.6-1.5-2.6-1.1z\"\r\n                />\r\n              </g>\r\n            </g>\r\n            <path\r\n              id=\"mouthOutline\"\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M149 115.7c-4.6 3.7-6.6 9.8-5 15.6.1.5.3 1.1.5 1.6.6 1.5 2.4 2.3 3.9 1.7l11.2-4.4 11.2-4.4c1.5-.6 2.3-2.4 1.7-3.9-.2-.5-.4-1-.7-1.5-2.8-5.2-8.4-8.3-14.1-7.9-3.7.2-5.9 1.1-8.7 3.2z\"\r\n            />\r\n          </g>\r\n          <g id=\"armR\">\r\n            <path\r\n              className=\"hlSkin\"\r\n              fill=\"#DDF1FA\"\r\n              d=\"M158.4 116.9l-.7.3c-3.7 1.5-5.5 5.7-4.1 9.4l1.2 2.9c1.7 4.4 6.7 6.5 11.1 4.8l1.4-.5\"\r\n            />\r\n            <path\r\n              fill=\"#A9DDF3\"\r\n              d=\"M154.8 129.1l.7 1.8c1 2.5 5.4 3.1 5.4 3.1l-2-5.1c-.3-.7-1.1-1.1-1.8-.8l-2.3 1z\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M158.4 116.9l-.7.3c-3.7 1.5-5.5 5.7-4.1 9.4l1.2 2.9c1.7 4.4 6.7 6.5 11.1 4.8l1.4-.5\"\r\n            />\r\n            <path\r\n              className=\"hlSkin\"\r\n              fill=\"#DDF1FA\"\r\n              stroke=\"#265D85\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M167.7 113.2l-.7.3c-3.7 1.5-5.5 5.7-4.1 9.4l1.2 2.9c1.7 4.4 6.7 6.5 11.1 4.8l1.4-.5\"\r\n            />\r\n            <path\r\n              className=\"hlSkin\"\r\n              fill=\"#DDF1FA\"\r\n              stroke=\"#265D85\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M177 109.4l-.7.3c-3.7 1.5-5.5 5.7-4.1 9.4l1.2 2.9c1.7 4.4 6.7 6.5 11.1 4.8l1.4-.5\"\r\n            />\r\n            <path\r\n              fill=\"#88C9F2\"\r\n              d=\"M162.3 128.6l18.6 46.7 37.2-14.8-17.9-44.8\"\r\n            />\r\n            <path\r\n              className=\"hlSkin\"\r\n              fill=\"#DDF1FA\"\r\n              d=\"M206.5 130.7l-5.9-15.1-37.9 13 6.4 17.4c10 1.6 34.6-6.3 37.4-15.3z\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M162.3 128.6l18.6 46.7 37.2-14.8-15.3-38.3\"\r\n            />\r\n            <path\r\n              className=\"hlSkin\"\r\n              fill=\"#DDF1FA\"\r\n              d=\"M190.8 119l-1.5-3.7c-2-5.1-7.9-7.6-13-5.6l5.2 12.9\"\r\n            />\r\n            <path\r\n              className=\"hlSkin\"\r\n              fill=\"#DDF1FA\"\r\n              d=\"M203.5 123.8l-1.5-3.7c-2-5.1-7.9-7.6-13-5.6l5.2 12.9\"\r\n            />\r\n            <path\r\n              fill=\"#A9DDF3\"\r\n              d=\"M200.4 119.4l-.7-1.8c-1-2.5-5.4-3.1-5.4-3.1l1.9 4.8c.3.8 1.3 1.3 2.1.9l2.1-.8z\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M203.5 123.8l-1.5-3.7c-2-5.1-7.9-7.6-13-5.6\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M193.7 126.4l-4.4-11.1c-2-5.1-7.9-7.6-13-5.6\"\r\n            />\r\n            <path\r\n              fill=\"#67B1E0\"\r\n              d=\"M219.6 160.1c-1.5-6.2-3.2-13.2-5.1-21.1-2.8 2.1-5.6 4.5-8.3 7.4-2-1.8-4.1-3.7-6.2-5.7-2.4 3.6-4.6 7.7-6.7 12.1-3-1.9-6-3.9-9.2-6-1.4 2.9-2.7 6-4 9.2-4.7-.6-9.4-1.1-14.2-1.7 5.4 8 10.3 15.2 14.7 21.5\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M219.6 160.1c-1.5-6.2-3.2-13.2-5.1-21.1-2.8 2.1-5.6 4.5-8.3 7.4-2-1.8-4.1-3.7-6.2-5.7-2.4 3.6-4.6 7.7-6.7 12.1-3-1.9-6-3.9-9.2-6-1.4 2.9-2.7 6-4 9.2-4.7-.6-9.4-1.1-14.2-1.7 5.4 8 10.3 15.2 14.7 21.5\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#3A5E77\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M160.9 125l2 5.1\"\r\n            />\r\n            <path\r\n              className=\"hlSkin\"\r\n              fill=\"#DDF1FA\"\r\n              d=\"M172.2 126.4l-1.5-3.7c-2-5.1-7.9-7.6-13-5.6l5.2 12.9\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M160.5 124l2.4 6.1\"\r\n            />\r\n            <path\r\n              className=\"hlSkin\"\r\n              fill=\"#DDF1FA\"\r\n              d=\"M181.5 122.7L180 119c-2-5.1-7.9-7.6-13-5.6l5.2 12.9\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M181.5 122.7L180 119c-2-5.1-7.9-7.6-13-5.6\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M172.2 126.4l-1.5-3.7c-2-5.1-7.9-7.6-13-5.6\"\r\n            />\r\n          </g>\r\n          <g id=\"armL\">\r\n            <path\r\n              fill=\"#67B1E0\"\r\n              d=\"M50.9 156.7c-12 35.8-7.8 69.6 8.3 101.9 12.1 22.7 37 14.1 39.5-11.8v-65l-47.8-25.1z\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M50.9 156.7c-12 35.8-7.8 69.6 8.3 101.9 10 22.3 37.3 15.1 39.5-11.8v-65l-47.8-25.1z\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#262626\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeWidth=\"20\"\r\n              d=\"M59.3 143.8l34.3 33.9\"\r\n            />\r\n            <path\r\n              fill=\"#4D4D4D\"\r\n              d=\"M58.4 133.9l15.9 15.9-.9.9-16.5-16.5c.5-.2 1-.3 1.5-.3z\"\r\n            />\r\n            <path\r\n              fill=\"#1A1A1A\"\r\n              d=\"M71.2 169.6l-20.1-20c-2.4-3.7-2.5-8.1.1-11.7l23.1 22.2\"\r\n            />\r\n            <path\r\n              fill=\"#4D4D4D\"\r\n              d=\"M80.5 156.4l16 15.9-.9.9-16.5-16.5c.5-.1 1-.2 1.4-.3z\"\r\n            />\r\n            <path\r\n              fill=\"#1A1A1A\"\r\n              d=\"M74.2 160.1L86 171.4l-2 11-10.2-10.1c-2.4-4.4-2.5-8.5.4-12.2z\"\r\n            />\r\n            <path\r\n              fill=\"#88C9F2\"\r\n              d=\"M65.9 164.8c-1.9-5.5.8-11.8 6.1-14.1 4.9-2.2 10.4-.6 13.5 3.4 1.3 1.6 3.5 2.1 5.4 1.4 3-1.2 3.9-4.9 1.9-7.4-5.8-7.2-16.1-9.9-25-5.7-9.4 4.4-14.1 15.3-10.9 25.2\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M67.9 168.3c-1.1-1.2-2-3.6-2-3.6-1.9-5.5.8-11.8 6.1-14.1 4.9-2.2 10.4-.6 13.5 3.4 1.3 1.6 3.5 2.1 5.4 1.4 3-1.2 3.9-4.9 1.9-7.4-5.8-7.2-16.1-9.9-25-5.7-9.4 4.4-14.1 15.3-10.9 25.2\"\r\n            />\r\n            <path\r\n              fill=\"#88C9F2\"\r\n              d=\"M69.9 168.7c-1.9-5.5.8-11.8 6.1-14.1 4.9-2.2 10.4-.6 13.5 3.4 1.3 1.6 3.5 2.1 5.4 1.4 3-1.2 3.9-4.9 1.9-7.4-5.8-7.2-16.1-9.9-25-5.7-9.4 4.4-14.1 15.3-10.9 25.2\"\r\n            />\r\n            <path\r\n              fill=\"#67B1E0\"\r\n              d=\"M49.9 155l2.7 12.7.2 11.8 5 8.6 9.5-1.8 2-8.7-6.9.6 1.7-11.7-6.6 2.8 1-13.8-4.6 2.9z\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M71.9 172.3c-1.1-1.2-2-3.6-2-3.6-1.9-5.5.8-11.8 6.1-14.1 4.9-2.2 10.4-.6 13.5 3.4 1.3 1.6 3.5 2.1 5.4 1.4 3-1.2 3.9-4.9 1.9-7.4-5.8-7.2-16.1-9.9-25-5.7\"\r\n            />\r\n            <path\r\n              className=\"hlSkin\"\r\n              id=\"hlHandL\"\r\n              fill=\"#DDF1FA\"\r\n              d=\"M101.7 156.9c-5.8-7.2-16.1-9.9-25-5.7-5.9 2.8-9.9 8.1-11.3 14.1l-1-.9-6.2 4.2c5.5 18.1 19.3 25.4 30.4 21l1.2-9.1c-6 2.4-12.7-.7-14.9-6.8-1.9-5.5.8-11.8 6.1-14.1 4.9-2.2 10.4-.6 13.5 3.4 1.3 1.6 3.5 2.1 5.4 1.4 2.9-1.3 3.8-5 1.8-7.5z\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M89.7 180.5c-6 2.4-12.7-.7-14.9-6.8\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M76.9 177.3c-1.1-1.2-2-3.6-2-3.6-1.9-5.5.8-11.8 6.1-14.1 4.9-2.2 10.4-.6 13.5 3.4 1.3 1.6 3.5 2.1 5.4 1.4 3-1.2 3.9-4.9 1.9-7.4-5.8-7.2-16.1-9.9-25-5.7\"\r\n            />\r\n            <path\r\n              className=\"hlFur\"\r\n              id=\"hlArmL\"\r\n              fill=\"#FFF\"\r\n              d=\"M98.8 202.8l-1.4-8.7-5.2.7-7.2-11.5-6.8 9-3.9-9.3-7.5 4.8 3.5-11.4-7.1 1.9 2.7-13.5-7.8 4.9c-11.7 26.5-3.6 52.5 1.7 66.6 15.5-6.4 30.3-21.9 39-33.5z\"\r\n            />\r\n            <path\r\n              fill=\"#A9DDF3\"\r\n              d=\"M101 161.2l-2.4-2.2c.2-1.6-.2-2.7-.8-3.9l2.6 2.5c.8.8 1 2.2.6 3.6z\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M66.9 187.8l3.5-11.4-7.2 1.9 2.6-13.9-7.5 4.5 1.2-15.5-5.5 4.2\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M54 157.6l-5.6-5.6 2.7 14.7\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M67.1 188l7.3-5 3.8 9.3\"\r\n            />\r\n            <path\r\n              fill=\"none\"\r\n              stroke=\"#265D85\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2.5\"\r\n              d=\"M78.2 192.3l6.8-9 7.1 11.5\"\r\n            />\r\n          </g>\r\n        </g>\r\n        <g\r\n          id=\"fingersBackL\"\r\n          style={{ visibility: \"hidden\" }}\r\n          fill=\"#88C9F2\"\r\n          stroke=\"#265D85\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeMiterlimit=\"10\"\r\n          strokeWidth=\"2.5\"\r\n        >\r\n          <path d=\"M149.2 177.5l-5.6-23.3c-.6-2.7 1-5.4 3.7-6 2.7-.6 5.4 1 6 3.7l4.4 18.4c.6 2.7-1 5.4-3.7 6l-4.8 1.2M139.4 179.8l-5.6-23.3c-.6-2.7 1-5.4 3.7-6 2.7-.6 5.4 1 6 3.7l5.6 23.3-9.7 2.3z\" />\r\n          <path d=\"M128.6 177.3l-4.4-18.4c-.6-2.7 1-5.4 3.7-6 2.7-.6 5.4 1 6 3.7l5.6 23.3-4.9 1.2c-2.7.5-5.4-1.2-6-3.8z\" />\r\n        </g>\r\n        <g\r\n          id=\"fingersBackR\"\r\n          style={{ visibility: \"hidden\" }}\r\n          fill=\"#88c9f2\"\r\n          stroke=\"#265D85\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeMiterlimit=\"10\"\r\n          strokeWidth=\"2.5\"\r\n        >\r\n          <path d=\"M215.5 152l-15.9-17.9c-1.8-2.1-1.6-5.2.4-7.1 2.1-1.8 5.2-1.6 7.1.4l12.6 14.2c1.8 2.1 1.6 5.2-.4 7l-3.8 3.4\" />\r\n          <path d=\"M208 158.6l-15.9-17.9c-1.8-2.1-1.6-5.2.4-7.1 2.1-1.8 5.2-1.6 7.1.4l15.9 17.9-7.5 6.7z\" />\r\n          <path d=\"M197.2 161.5l-12.6-14.2c-1.8-2.1-1.6-5.2.4-7.1 2.1-1.8 5.2-1.6 7.1.4l15.9 17.9-3.7 3.3c-2.1 2-5.2 1.8-7.1-.3z\" />\r\n        </g>\r\n        <g id=\"blanket\">\r\n          <path\r\n            d=\"M1.2 271.4C6.6 262 13 253.1 22.4 248c10.3-5.5 22.5-5.5 33.7-8.8 21.8-6.5 37.5-25.2 50.3-43.9 5.5-8 10.9-16.4 18.3-22.7 13.1-11.2 31.3-14.8 48.6-15 4.9 0 9.9.1 14.5-1.7 3.6-1.5 6.5-4.1 9.3-6.9 10.1-10.2 17.9-22.8 29-32 7.9-6.6 18.7-14.7 29.5-13.7 13.9 1.2 25 5.8 38.5-1.5 28.1-15.2 27.8-60.6 56.2-75.1 16.2-8.3 36.9-3.6 52.6-12.7 5.4-3.2 9.8-7.7 13.9-12.5h128.5l-350.8 209L1.3 363l-.1-91.6z\"\r\n            opacity=\".1\"\r\n          />\r\n          <path\r\n            fill=\"#09334F\"\r\n            d=\"M0 281.6c5.3-9.2 11.5-17.9 20.7-22.8 10.3-5.5 22.5-5.5 33.7-8.8 21.8-6.5 37.5-25.2 50.3-43.9 5.5-8 10.9-16.4 18.3-22.7 13.1-11.2 31.3-14.8 48.6-15 4.9 0 9.9.1 14.5-1.7 3.6-1.5 6.5-4.1 9.3-6.9 10.1-10.2 17.9-22.8 29-32 7.9-6.6 18.7-14.7 29.5-13.7 13.9 1.2 25 5.8 38.5-1.5 28.1-15.2 27.8-60.6 56.2-75.1 16.2-8.3 36.9-3.6 52.6-12.7C411 19.1 417.1 8.4 424.9.3H700v570H0V281.6z\"\r\n          />\r\n          <path\r\n            fill=\"#072A40\"\r\n            d=\"M0 281.6c5.3-9.2 11.6-17.9 20.8-22.8 10.3-5.5 22.5-5.5 33.7-8.8 21.8-6.5 37.5-25.2 50.3-43.9 5.5-8 10.9-16.4 18.3-22.7 13.1-11.2 31.3-14.8 48.6-15 4.9 0 9.9.1 14.5-1.7 3.6-1.5 6.5-4.1 9.3-6.9 10.1-10.2 17.9-22.8 29-32 7.9-6.6 18.7-14.7 29.5-13.7 13.9 1.2 25 5.8 38.5-1.5 28.1-15.2 27.8-60.6 56.2-75.1 16.2-8.3 36.9-3.6 52.6-12.7 9.8-5.7 15.9-16.4 23.7-24.6h100.4c-3.5 2.8-7.3 5.3-11.4 7.2-11.6 5.4-23 6.6-34.9 1.9-10.5-4.2-22.3 2.4-30.1 10.6-7.8 8.2-14 18.3-23.7 24-15.7 9.1-36.4 4.4-52.6 12.7-28.4 14.6-28.2 60-56.2 75.1-13.5 7.3-24.6 2.8-38.5 1.5-10.8-1-21.5 7.1-29.5 13.7-11.2 9.2-18.9 21.8-29 32-2.7 2.7-5.7 5.4-9.3 6.9-4.5 1.9-9.6 1.7-14.5 1.7-17.3.2-35.4 3.8-48.6 15-7.4 6.3-12.8 14.7-18.3 22.7-12.9 18.7-28.6 37.4-50.3 43.9-11.2 3.4-23.4 3.3-33.7 8.8-11.9 6.4-18.9 19-25.2 31-8.2 15.3-11.6 30-19.6 44.7v-72z\"\r\n          />\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"#001726\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M1.2 283c5.3-9.3 11.8-18 21.1-23 10.3-5.5 22.5-5.5 33.7-8.8 21.8-6.5 37.5-25.2 50.3-43.9 5.5-8 10.9-16.4 18.3-22.7 13.1-11.2 31.3-14.8 48.6-15 4.9 0 9.9.1 14.5-1.7 3.6-1.5 6.5-4.1 9.3-6.9 10.1-10.2 17.9-22.8 29-32 7.9-6.6 18.7-14.7 29.5-13.7 13.9 1.2 25 5.8 38.5-1.5 28.1-15.2 27.8-60.6 56.2-75.1 16.2-8.3 36.9-3.6 52.6-12.7 9.8-5.7 15.9-16.4 23.7-24.5\"\r\n          />\r\n          <path\r\n            fill=\"none\"\r\n            stroke=\"#001726\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M1.2 355c8-14.7 11.7-29.4 19.9-44.9 6.3-11.9 13.3-24.6 25.2-31 10.3-5.5 22.5-5.5 33.7-8.8 21.8-6.5 37.5-25.2 50.3-43.9 5.5-8 10.9-16.4 18.3-22.7 13.1-11.2 31.3-14.8 48.6-15 4.9 0 9.9.1 14.5-1.7 3.6-1.5 6.5-4.1 9.3-6.9 10.1-10.2 17.9-22.8 29-32 7.9-6.6 18.7-14.7 29.5-13.7 13.9 1.2 25 5.8 38.5-1.5 28.1-15.2 27.8-60.6 56.2-75.1 16.2-8.3 36.9-3.6 52.6-12.7 9.8-5.7 15.9-15.8 23.7-24s19.6-14.8 30.1-10.6c11.9 4.8 23.2 3.5 34.9-1.9 4-1.9 7.7-4.4 11.2-7.1\"\r\n          />\r\n          <path\r\n            d=\"M111.2 197.2s50.7 23.9 90.8 43.1c14.2 6.8 18 25.4 7.5 37.2-7.6 8.5-20.2 10.4-30 4.5l-89.9-54.7 21.6-30.1z\"\r\n            opacity=\".03\"\r\n          />\r\n          <path\r\n            d=\"M12.1 266s53.5 64.8 94.7 114c11.7 13.9 1.8 35.1-16.4 35.1-7.1 0-13.8-3.6-17.8-9.5L0 296.5v-13.2L12.1 266z\"\r\n            opacity=\".03\"\r\n          />\r\n          <path\r\n            d=\"M155.7 170.1s111.4 46.9 171.1 69c3.5 1.3 7.4 0 9.4-3.2 2.7-4.2.9-9.9-3.8-11.7-33.5-12.8-147.3-56-147.3-56l-29.4 1.9z\"\r\n            opacity=\".03\"\r\n          />\r\n          <path\r\n            d=\"M255.9 114.7S349 145.6 412 176c2.1 1 4.6.6 6.2-1 2.8-2.7 1.9-7.5-1.7-9-23.3-9.6-94.3-38.6-131.1-50.4-.1.1-10.2 1.9-29.5-.9z\"\r\n            opacity=\".03\"\r\n          />\r\n          <path\r\n            d=\"M356.6 34.9l152.1 49.3c2.2.7 4.5.6 6.7-.2 8.7-3.4 8.2-15.9-.7-18.6l-121-36.8-37.1 6.3z\"\r\n            opacity=\".03\"\r\n          />\r\n        </g>\r\n        <g id=\"fingersFrontL\" style={{ visibility: \"hidden\" }}>\r\n          <path\r\n            fill=\"#88C9F2\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M146.2 165.1l2.8 11.6c.6 2.7 3.3 4.3 6 3.7 2.7-.6 4.3-3.3 3.7-6l-1.6-6.8c-.6-2.7-3.3-4.3-6-3.7l-4.9 1.2\"\r\n          />\r\n          <path\r\n            fill=\"#A9DDF3\"\r\n            d=\"M151.4 173.8l.5 2.2c.3 1.1 1.3 1.7 2.4 1.5 1.1-.3 1.7-1.3 1.5-2.4l-.5-2.2-3.9.9z\"\r\n          />\r\n          <path\r\n            fill=\"#88C9F2\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M136.5 167.4l2.8 11.6c.6 2.7 3.3 4.3 6 3.7 2.7-.6 4.3-3.3 3.7-6l-2.8-11.6-9.7 2.3z\"\r\n          />\r\n          <path\r\n            fill=\"#A9DDF3\"\r\n            d=\"M141.7 176.2l.5 2.2c.3 1.1 1.3 1.7 2.4 1.5 1.1-.3 1.7-1.3 1.5-2.4l-.5-2.2-3.9.9z\"\r\n          />\r\n          <path\r\n            fill=\"#88C9F2\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M127.9 174.6l1.6 6.8c.6 2.7 3.3 4.3 6 3.7 2.7-.6 4.3-3.3 3.7-6l-2.8-11.6-4.9 1.2c-2.6.5-4.2 3.2-3.6 5.9z\"\r\n          />\r\n          <path\r\n            fill=\"#A9DDF3\"\r\n            d=\"M131.9 178.5l.5 2.2c.3 1.1 1.3 1.7 2.4 1.5 1.1-.3 1.7-1.3 1.5-2.4l-.5-2.2-3.9.9z\"\r\n          />\r\n        </g>\r\n        <g id=\"fingersFrontR\" style={{ visibility: \"hidden\" }}>\r\n          <path\r\n            fill=\"#88c9f2\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M207.1 142.5l7.9 8.9c1.8 2.1 5 2.3 7.1.4 2.1-1.8 2.3-5 .4-7.1l-4.6-5.2c-1.8-2.1-5-2.2-7-.4l-3.8 3.4\"\r\n          />\r\n          <path\r\n            fill=\"#A9DDF3\"\r\n            d=\"M215.8 147.7l1.5 1.7c.7.8 2 .9 2.8.2.8-.7.9-2 .2-2.8l-1.5-1.7-3 2.6z\"\r\n          />\r\n          <path\r\n            fill=\"#88c9f2\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M199.6 149.1l7.9 8.9c1.8 2.1 5 2.3 7.1.4 2.1-1.8 2.3-5 .4-7.1l-7.9-8.9-7.5 6.7z\"\r\n          />\r\n          <path\r\n            fill=\"#A9DDF3\"\r\n            d=\"M208.3 154.4l1.5 1.7c.7.8 2 .9 2.8.2.8-.7.9-2 .2-2.8l-1.5-1.7-3 2.6z\"\r\n          />\r\n          <path\r\n            fill=\"#88c9f2\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            d=\"M195.4 159.5l4.6 5.2c1.8 2.1 5 2.3 7.1.4 2.1-1.8 2.3-5 .4-7.1l-7.9-8.9-3.7 3.3c-2.1 1.9-2.3 5-.5 7.1z\"\r\n          />\r\n          <path\r\n            fill=\"#A9DDF3\"\r\n            d=\"M200.8 161l1.5 1.7c.7.8 2 .9 2.8.2.8-.7.9-2 .2-2.8l-1.5-1.7-3 2.6z\"\r\n          />\r\n        </g>\r\n        <g id=\"flashlightFront\">\r\n          <path\r\n            fill=\"#1A1A1A\"\r\n            d=\"M83.9 181.4l4.6 26.4 34.6-33.6-24.5-6.2c-8.9-2.6-16.6 3.9-14.7 13.4z\"\r\n          />\r\n          <path\r\n            fill=\"#333\"\r\n            d=\"M91.9 167.8l20.5 7.4-.5 1.2-21.4-8.2c.5-.2 1-.3 1.4-.4z\"\r\n          />\r\n          <path d=\"M86 171.4c-2 2.5-3 6-2.2 10l4.6 26.4 11.4-11.1L86 171.4z\" />\r\n          <path\r\n            fill=\"url(#flashlightGrad)\"\r\n            d=\"M99.1 183.7c-10.6 9.4-13.4 21.4-9 28.5 4.3 6.8 18 3 28.6-6.4s14.9-23.7 8.8-29c-6.9-6.1-17.8-2.6-28.4 6.9z\"\r\n          />\r\n          <path\r\n            fill=\"#B3B3B3\"\r\n            d=\"M101.6 185.7c-8.2 7.3-11.9 18.2-8.8 23.1 2.6 4.1 13.6-1.1 21.8-8.4s13.6-18.1 9.9-21.6c-4.4-4.2-14.7-.4-22.9 6.9z\"\r\n          />\r\n        </g>\r\n      </svg>\r\n\r\n      {/* Light SVG */}\r\n      <svg\r\n        id=\"lightSVG\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 600 470\"\r\n        className=\"w-[600px] h-[470px] absolute top-0 left-0 overflow-visible\"\r\n      >\r\n        <filter id=\"white-glow\">\r\n          <feFlood\r\n            result=\"flood\"\r\n            floodColor=\"#ffffff\"\r\n            floodOpacity=\".6\"\r\n          ></feFlood>\r\n          <feComposite\r\n            in=\"flood\"\r\n            result=\"mask\"\r\n            in2=\"SourceGraphic\"\r\n            operator=\"in\"\r\n          ></feComposite>\r\n          <feMorphology\r\n            in=\"mask\"\r\n            result=\"dilated\"\r\n            operator=\"dilate\"\r\n            radius=\"3\"\r\n          ></feMorphology>\r\n          <feGaussianBlur\r\n            in=\"dilated\"\r\n            result=\"blurred\"\r\n            stdDeviation=\"8\"\r\n          ></feGaussianBlur>\r\n          <feMerge>\r\n            <feMergeNode in=\"blurred\"></feMergeNode>\r\n            <feMergeNode in=\"SourceGraphic\"></feMergeNode>\r\n          </feMerge>\r\n        </filter>\r\n        <g id=\"light\" style={{ visibility: \"hidden\" }}>\r\n          <path\r\n            filter=\"url(#white-glow)\"\r\n            fill=\"#F8FFE8\"\r\n            d=\"M122.2 177.4c-5.2-1.6-13.6 2.1-20.6 8.3-7.7 6.8-11.4 16.8-9.3 22.1L421 1683h1534V733L122.2 177.4z\"\r\n          />\r\n          <path\r\n            opacity=\"0.7\"\r\n            fill=\"#FFFFFF\"\r\n            d=\"M101.6,185.7c-8.2,7.3-11.9,18.2-8.8,23.1c2.6,4.1,13.6-1.1,21.8-8.4s13.6-18.1,9.9-21.6 C120.1,174.6,109.8,178.4,101.6,185.7z\"\r\n          />\r\n        </g>\r\n        <g id=\"four04\">\r\n          {/* <!--\r\n\t\t<g opacity=\".2\" id=\"lettersShadow\">\r\n\t\t\t<path d=\"M171.2 309.9l18 27.4-30.7 27.2 13.2 15.2 74 22.3 26.7-11-26.9-30.7 7.1-10.8-14.9-18.2-15.5-3.8-16.3-22.3z\"/>\r\n\t\t\t<path d=\"M227.8 344.8s37 79.2 104.2 53.5c52.2-20-41-64-50.3-68.9-9.3-4.9-45.4 4.1-45.4 4.1l-8.5 11.3z\"/>\r\n\t\t\t<path d=\"M313.7 372.9l18.2 25.4-12.1 29.9 13.1 15.2 96.2 16.1 28.6-14.5-35.7-25.2 11.3-7.1-22.7-22.2-19.1.4-42.6-18z\"/>\r\n\t\t</g>\r\n\t\t<path className=\"lettersSide\" stroke=\"#265D85\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" fill=\"#3A7199\" d=\"M192.4 255.2l-10.6 3.5 9.1.5 11.4-3.8zM163.5 287.7l7.4 22.3 8.3 4.4-7.9-24zM160 255.9c-.1-.5-.3-.9-.5-1.4-.2-.5-.3-1-.5-1.5s-.3-1-.5-1.6-.3-1.1-.5-1.6-.3-1.1-.5-1.7c-.2-.6-.3-1.1-.5-1.7-.2-.6-.3-1.1-.5-1.7-.2-.6-.3-1.2-.5-1.7-.2-.6-.3-1.2-.5-1.7-.2-.6-.3-1.2-.5-1.7-.2-.6-.3-1.1-.5-1.7-.2-.6-.3-1.1-.5-1.7s-.3-1.1-.5-1.7c-.1-.5-.3-1.1-.4-1.6-.1-.5-.3-1-.4-1.5-.1-.5-.3-1-.4-1.4l-6.4 1.6c.1.4.2.9.4 1.3.1.5.2.9.4 1.4.1.5.3 1 .4 1.5s.3 1 .4 1.5c.1.5.3 1.1.4 1.6s.3 1.1.4 1.6c.1.5.3 1.1.4 1.6.1.5.3 1.1.4 1.6.1.5.3 1.1.4 1.6.1.5.3 1.1.5 1.6s.3 1.1.5 1.6.3 1 .5 1.6c.2.5.3 1 .5 1.5s.3 1 .4 1.4.3.9.4 1.4c.1.4.3.9.4 1.3l3.7 11.4-17 5.7 5.9 1.6 18.3-6.2-3.6-12.3zM129.4 212.3L114.6 283l6.3 19.1 4.5 3.9-6.8-20.6 15.9-76.2z\"/>\r\n\t\t<path className=\"lettersFront\" stroke=\"#265D85\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" fill=\"#67B1E0\" d=\"M190.9 259.2l11.4-3.8 7.1 22-11.3 3.9 7.8 24-26.8 9.2-7.9-24.1-45.8 15.6-6.8-20.6 15.9-76.2 36.4-11.8 20 61.8zm-36.6-23.1c-.2-.6-.3-1.1-.5-1.7-.1-.5-.3-1.1-.4-1.6-.1-.5-.3-1-.4-1.5-.1-.5-.3-1-.4-1.4l-.7.2c-.1.9-.1 1.9-.2 2.8-.1.9-.2 1.9-.2 2.8-.1.9-.2 1.9-.3 2.8-.1.9-.2 1.9-.3 2.8-.1.9-.2 1.8-.3 2.8-.1.9-.2 1.9-.3 2.8-.1.9-.2 1.9-.4 2.8-.1 1-.2 1.9-.4 2.9l-3.8 21.8 18.3-6.2-4-12.3c-.1-.5-.3-.9-.5-1.4-.2-.5-.3-1-.5-1.5s-.3-1-.5-1.6c-.2-.5-.3-1.1-.5-1.6-.2-.6-.3-1.1-.5-1.7-.2-.6-.3-1.1-.5-1.7-.2-.6-.3-1.1-.5-1.7-.2-.6-.3-1.2-.5-1.7-.2-.6-.3-1.2-.5-1.7-.2-.6-.3-1.2-.5-1.7-.2-.6-.3-1.1-.5-1.7.1-.6-.1-1.2-.2-1.8\"/>\r\n\t\t<path className=\"lettersSide\" stroke=\"#265D85\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" fill=\"#3A7199\" d=\"M263.9 273.7l-.3-3.3c-.1-1-.2-2-.4-2.9-.2-.9-.3-1.7-.5-2.5s-.4-1.5-.6-2.2c-.2-.7-.5-1.3-.8-1.8l-.9-1.5c-.3-.4-.6-.8-1-1.2-.3-.3-.7-.6-1.1-.9l-1.2-.6c-.4-.2-.8-.3-1.2-.5s-.8-.3-1.3-.3c-.4-.1-.9-.2-1.3-.2h-8.5 1.2c.4 0 .8.1 1.2.2l1.2.3c.4.1.8.3 1.1.5.4.2.7.4 1.1.6.4.2.7.5 1 .8.3.3.6.7.9 1.1.3.4.6.9.8 1.4.3.5.5 1.1.7 1.7.2.6.4 1.3.6 2 .2.7.3 1.5.5 2.3.1.8.3 1.7.4 2.7.1 1 .2 2 .2 3 .1 1.1.1 2.2.1 3.5 0 1.2 0 2.6-.1 4s-.1 2.9-.2 4.5-.2 3.2-.4 5c-.2 1.7-.3 3.4-.5 5s-.4 3.1-.6 4.5c-.2 1.4-.4 2.7-.7 3.9-.2 1.2-.5 2.4-.8 3.4-.3 1.1-.5 2.1-.8 3s-.6 1.8-.9 2.6c-.3.8-.6 1.6-.9 2.3-.3.7-.6 1.3-1 1.9-.2.3-.3.5-.5.8-.1.1-.1.2-.2.2-.1.2-.2.3-.3.5-.1.1-.1.2-.2.3-.1.1-.2.3-.3.4-.1.1-.1.2-.2.3l-.3.3-.2.2-.3.3c-.1.1-.2.1-.2.2-.1.1-.2.2-.3.2-.1.1-.2.1-.2.2-.1.1-.2.1-.3.2-.1 0-.2.1-.2.1-.2.1-.3.2-.5.3-.4.2-.8.3-1.2.4-.4.1-.8.2-1.1.3h-.1c-.4.1-.8.1-1.1.1h-1.3c-.4 0-.8-.1-1.2-.2h-.1c-.4-.1-.7-.2-1.1-.3-.4-.1-.7-.3-1.1-.5-.4-.2-.7-.4-1.1-.6h-.1-.1-.1-.1l6.5 4.9h.4c.2.1.4.2.6.4l.6.3c.2.1.4.2.5.3.2.1.4.2.6.2.2.1.4.1.5.2.2.1.4.1.6.2.2 0 .3.1.5.1s.4.1.6.1H248.2c.2 0 .3 0 .5-.1h.4c.2 0 .3-.1.5-.1s.3-.1.5-.1h.1c.1 0 .1 0 .2-.1.1 0 .2-.1.4-.1s.2-.1.3-.1c.1 0 .2-.1.3-.2h.1s.1 0 .1-.1c0 0 .1 0 .1-.1 0 0 .1 0 .1-.1 0 0 .1 0 .1-.1.1 0 .2-.1.3-.2.1-.1.2-.1.3-.2l.1-.1.1-.1c.1 0 .1-.1.2-.1s.1-.1.2-.1c.1-.1.2-.1.2-.2l.3-.3c.1-.1.1-.1.2-.1l.1-.1.1-.1c.1-.1.1-.2.2-.3.1-.1.2-.2.2-.3.1-.1.2-.3.3-.4l.2-.2v-.1-.1c.1-.1.2-.3.3-.5.1-.1.1-.2.2-.3.2-.3.3-.6.5-.9.4-.6.7-1.3 1-2.1.3-.8.7-1.6 1-2.5.3-.9.6-1.8.9-2.9.3-1 .6-2.1.9-3.2s.6-2.4.8-3.7.5-2.7.7-4.3c.2-1.5.5-3.1.7-4.8.2-1.7.4-3.5.6-5.3.2-1.9.3-3.7.4-5.4.1-1.7.2-3.3.3-4.8.1-1.5.1-2.9.1-4.3.7-1.1.7-2.3.6-3.5zM225.7 242c.4-.4.8-.7 1.2-1.1.1-.1.2-.2.4-.3l1.5-1.2c.1-.1.2-.2.3-.2.4-.3.8-.6 1.3-.9.2-.1.3-.2.5-.3l1.5-.9c.1 0 .1-.1.2-.1.6-.3 1.1-.6 1.7-.9.1-.1.2-.1.3-.2.6-.3 1.1-.5 1.7-.8.1 0 .2-.1.2-.1.6-.3 1.2-.5 1.8-.7.3-.1.5-.2.8-.3.1 0 .1 0 .2-.1.2-.1.5-.2.7-.2h.1c.3-.1.6-.2.9-.2.3-.1.6-.2.9-.2l-6.6 1.6c-.1 0-.2 0-.3.1-.1 0-.2 0-.3.1-.1 0-.2 0-.3.1-.1 0-.1 0-.2.1-.2.1-.4.1-.6.2h-.1c-.1 0-.3.1-.4.1-.1 0-.1 0-.2.1h-.1-.1c-.1 0-.1 0-.2.1-.2.1-.4.1-.6.2-.3.1-.7.3-1 .4-.2.1-.4.2-.7.3-.1 0-.1.1-.2.1 0 0-.1 0-.1.1-.3.2-.7.3-1 .5-.1.1-.3.1-.4.2 0 0-.1 0-.1.1 0 0-.1 0-.1.1-.1.1-.2.1-.3.2-.4.2-.9.5-1.3.7-.1 0-.1.1-.2.1-.3.2-.7.4-1 .6-.1.1-.2.2-.3.2-.1 0-.1.1-.2.1-.1.1-.2.1-.2.2-.4.3-.8.6-1.2.8-.1.1-.2.2-.3.2l-.1.1c-.4.3-.9.7-1.3 1.1l-.1.1c-.1.1-.2.1-.2.2l-.6.6c-.2.1-.3.3-.4.4-.1.1-.3.2-.4.4-.5.4-.9.9-1.3 1.4-1 1-1.9 2.2-2.8 3.4-.9 1.2-1.7 2.5-2.6 3.8-.8 1.4-1.6 2.8-2.3 4.3-.7 1.5-1.4 3.1-2 4.8-.6 1.7-1.2 3.4-1.7 5.2-.5 1.8-1 3.7-1.4 5.7-.4 2-.8 4-1.1 6.1-.3 2.1-.6 4.3-.8 6.6-.2 2.3-.4 4.5-.4 6.6-.1 2.1-.1 4.2 0 6.2s.2 4 .3 5.9c.2 1.9.4 3.7.7 5.5.3 1.8.7 3.5 1.1 5.1.4 1.6.9 3.2 1.4 4.7.5 1.5 1.1 2.9 1.8 4.3s1.4 2.7 2.1 3.9c.3.4.5.8.8 1.2.3.4.5.8.8 1.2s.6.8.8 1.1c.3.4.6.7.9 1.1l4.9 5.8-.9-1.2-.9-1.2c-.3-.4-.6-.8-.9-1.3-.3-.4-.6-.9-.8-1.3-.8-1.3-1.6-2.7-2.3-4.2-.7-1.5-1.3-3-1.9-4.6-.6-1.6-1.1-3.3-1.6-5.1-.5-1.8-.9-3.6-1.2-5.5-.3-1.9-.6-3.9-.8-5.9-.2-2-.3-4.1-.4-6.3-.1-2.2 0-4.4 0-6.7.1-2.3.2-4.7.5-7.1.2-2.4.5-4.8.9-7.1.3-2.3.7-4.5 1.2-6.6.5-2.1 1-4.2 1.5-6.1.6-2 1.2-3.8 1.9-5.7.7-1.8 1.4-3.5 2.2-5.2.8-1.6 1.6-3.2 2.5-4.7.9-1.5 1.8-2.8 2.8-4.1 1-1.3 2-2.5 3-3.6.5-.5 1-1 1.4-1.5-.2-.5 0-.6.1-.7z\"/>\r\n\t\t<path className=\"lettersFront\" stroke=\"#265D85\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" fill=\"#67B1E0\" d=\"M291.2 268.9c.3 1.9.6 3.8.8 5.8.2 2 .3 4.1.3 6.2 0 2.1 0 4.3-.1 6.6s-.3 4.6-.5 7c-.2 2.4-.5 4.7-.9 7-.3 2.2-.7 4.4-1.2 6.5-.5 2.1-1 4.1-1.5 6-.6 1.9-1.2 3.8-1.9 5.6-.7 1.8-1.4 3.5-2.2 5.1-.8 1.6-1.6 3.2-2.4 4.7-.9 1.5-1.8 2.9-2.7 4.2-.9 1.3-1.9 2.6-3 3.7-1 1.2-2.1 2.3-3.2 3.3s-2.3 1.9-3.5 2.8c-1.2.9-2.4 1.6-3.7 2.3-1.3.7-2.6 1.3-3.9 1.8-1.3.5-2.7 1-4.1 1.4-1.4.4-2.8.7-4.2.9-1.4.2-2.9.3-4.4.4-1.5 0-3 0-4.5-.1-1.6-.1-3.1-.3-4.6-.6-1.5-.3-2.9-.6-4.3-1.1-1.4-.4-2.7-.9-4-1.5-1.3-.6-2.6-1.3-3.8-2-1.2-.7-2.4-1.6-3.5-2.4-1.1-.9-2.2-1.9-3.2-2.9s-2-2.1-2.9-3.3c-.9-1.2-1.8-2.4-2.6-3.8-.8-1.3-1.6-2.7-2.3-4.2-.7-1.5-1.3-3-1.9-4.6-.6-1.6-1.1-3.3-1.6-5.1-.5-1.8-.9-3.6-1.2-5.5-.3-1.9-.6-3.9-.8-5.9-.2-2-.3-4.1-.4-6.3-.1-2.2 0-4.4 0-6.7.1-2.3.2-4.7.5-7.1.2-2.4.5-4.8.9-7.1.3-2.3.7-4.5 1.2-6.6.5-2.1 1-4.2 1.5-6.1.6-2 1.2-3.8 1.9-5.7.7-1.8 1.4-3.5 2.2-5.2.8-1.6 1.6-3.2 2.5-4.7.9-1.5 1.8-2.8 2.8-4.1 1-1.3 2-2.5 3-3.6 1.1-1.1 2.2-2.2 3.3-3.1 1.1-1 2.3-1.9 3.5-2.7 1.2-.8 2.4-1.5 3.7-2.2 1.3-.6 2.6-1.2 3.9-1.7 1.3-.5 2.7-.9 4.1-1.2 1.4-.3 2.8-.6 4.3-.7 1.5-.2 2.9-.2 4.5-.2 1.5 0 3.1.1 4.6.2 1.5.2 3 .4 4.5.7 1.5.3 2.9.7 4.3 1.1 1.4.5 2.7 1 4 1.6 1.3.6 2.6 1.3 3.8 2 1.2.7 2.4 1.6 3.5 2.4 1.1.9 2.2 1.8 3.2 2.9 1 1 2 2.1 2.9 3.3.9 1.2 1.8 2.4 2.6 3.7.8 1.3 1.5 2.7 2.2 4.1.7 1.4 1.3 3 1.9 4.6.6 1.6 1.1 3.2 1.5 5 .4 1.5.7 3.3 1.1 5.1zM260.4 310c.3-1.1.6-2.4.8-3.7.3-1.3.5-2.7.7-4.3.2-1.5.5-3.1.7-4.8.2-1.7.4-3.5.6-5.3.2-1.9.3-3.7.4-5.4.1-1.7.2-3.3.3-4.8.1-1.5.1-2.9.1-4.3 0-1.3 0-2.6-.1-3.7l-.3-3.3c-.1-1-.2-2-.4-2.9-.2-.9-.3-1.7-.5-2.5s-.4-1.5-.6-2.2c-.2-.7-.5-1.3-.8-1.8l-.9-1.5c-.3-.4-.6-.8-1-1.2-.3-.3-.7-.6-1.1-.9l-1.2-.6c-.4-.2-.8-.3-1.2-.5-.4-.1-.8-.3-1.3-.3-.4-.1-.9-.2-1.3-.2s-.9-.1-1.3-.1-.9 0-1.3.1-.9.1-1.3.2-.8.2-1.3.4l-1.2.6c-.4.3-.8.6-1.2 1-.4.4-.8.8-1.1 1.3-.4.5-.7 1-1.1 1.6-.4.6-.7 1.3-1 2s-.7 1.5-1 2.4-.6 1.8-.9 2.8c-.3 1-.6 2-.9 3.2-.3 1.1-.6 2.3-.8 3.7-.3 1.3-.5 2.7-.7 4.2-.2 1.5-.5 3.1-.7 4.8-.2 1.7-.4 3.5-.6 5.4-.2 1.9-.3 3.7-.4 5.4-.1 1.7-.2 3.3-.3 4.9-.1 1.5-.1 3-.1 4.3 0 1.4 0 2.6.1 3.8.1 1.2.2 2.3.3 3.4.1 1.1.2 2 .4 3 .2.9.3 1.8.5 2.6s.4 1.5.6 2.2c.2.7.5 1.3.8 1.9.3.6.6 1.1.9 1.6.3.5.6.9 1 1.2.3.4.7.7 1.1.9.4.3.8.5 1.2.7.4.2.8.4 1.2.5.4.1.8.3 1.3.4.4.1.9.2 1.3.2h1.3c.4 0 .9-.1 1.3-.1.4-.1.9-.2 1.3-.3.4-.1.8-.3 1.3-.5.4-.2.8-.4 1.2-.7.4-.3.8-.7 1.2-1.1.4-.4.8-.9 1.1-1.4.4-.5.7-1.1 1.1-1.7.4-.6.7-1.3 1-2.1.3-.8.7-1.6 1-2.5s.6-1.8.9-2.9c.3-.9.6-2 .9-3.1\"/>\r\n\t\t<path className=\"lettersSide\" stroke=\"#265D85\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" fill=\"#3A7199\" d=\"M357.7 333.7l-11-1.6 7.9 4.5 11.8 1.7zM317.3 349.6l-3.6 23.3 5.4 7.7 3.8-25.1zM328.4 319.7c.1-.5.1-1 .2-1.5l.3-1.5c.1-.5.2-1.1.3-1.6.1-.5.2-1.1.3-1.7.1-.6.2-1.2.3-1.7.1-.6.2-1.2.3-1.7l.3-1.8c.1-.6.2-1.2.4-1.8.1-.6.2-1.2.4-1.8.1-.6.2-1.2.4-1.8.1-.6.2-1.2.4-1.7.1-.6.2-1.2.4-1.7s.2-1.1.3-1.7c.1-.5.2-1.1.3-1.6l.3-1.5.3-1.5-6.5-1.4c-.1.4-.2.9-.3 1.3-.1.5-.2.9-.3 1.4l-.3 1.5c-.1.5-.2 1-.3 1.6-.1.5-.2 1.1-.3 1.6-.1.5-.2 1.1-.3 1.6-.1.5-.2 1.1-.3 1.6-.1.5-.2 1.1-.3 1.6-.1.5-.2 1.1-.3 1.6-.1.5-.2 1.1-.3 1.6-.1.5-.2 1.1-.3 1.6-.1.5-.2 1.1-.3 1.6-.1.5-.2 1.1-.3 1.6l-.3 1.5c-.1.5-.2 1-.2 1.4-.1.5-.1.9-.2 1.4l-1.8 11.9-17.8-2.6 4.6 4.1 19.1 2.8 1.8-12.7zM320.8 267l-45.1 56.4-3 19.9 2.3 5.5 3.2-21.5 48.6-60.8z\"/>\r\n\t\t<path className=\"lettersFront\" stroke=\"#265D85\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2.5\" fill=\"#67B1E0\" d=\"M354.6 336.6l11.9 1.7-3.6 22.9-11.9-1.7-3.9 24.9-28-3.8 3.8-25-48-6.8 3.2-21.4 48.6-60.8 37.8 5.9-9.9 64.1zm-22.3-37.1c.1-.6.2-1.1.3-1.7.1-.5.2-1.1.3-1.6l.3-1.5.3-1.5-.7-.1-1.5 2.4-1.5 2.4-1.5 2.4c-.5.8-1 1.6-1.5 2.3-.5.8-1 1.6-1.5 2.3s-1 1.6-1.6 2.4c-.5.8-1.1 1.6-1.6 2.4-.5.8-1.1 1.6-1.6 2.4l-13.2 17.7 19.1 2.8 2-12.8c.1-.5.1-1 .2-1.5l.3-1.5c.1-.5.2-1.1.3-1.6.1-.5.2-1.1.3-1.7s.2-1.2.3-1.7c.1-.6.2-1.2.3-1.7l.3-1.8c.1-.6.2-1.2.4-1.8.1-.6.2-1.2.4-1.8.1-.6.2-1.2.4-1.8.1-.6.2-1.2.4-1.7 0-.6.1-1.2.3-1.7\"/>\r\n\t\t--> */}\r\n          <g opacity=\".2\" id=\"lettersShadow\">\r\n            <path d=\"M233.2 408.6l30.6 46.3-51.9 46 22.2 25.8 125.2 37.6 45.1-18.7-45.5-51.9 12.1-18.1-25.3-30.8-26.2-6.5-27.5-37.7z\" />\r\n            <path d=\"M328.9 467.6S391.4 601.5 505 558c88.3-33.8-69.2-108.2-85-116.5-15.8-8.3-76.8 6.9-76.8 6.9l-14.3 19.2z\" />\r\n            <path d=\"M474.2 515.1L505 558l-20.6 50.6 22.3 25.8 162.5 27 48.4-24.3-60.2-42.7 19.1-12.1-38.4-37.4-32.3.6-72-30.3z\" />\r\n          </g>\r\n          <path\r\n            className=\"lettersSide\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            fill=\"#3A7199\"\r\n            d=\"M269.2 316l-17.9 6 15.4.8 19.2-6.4zM220.3 371l12.4 37.8 14 7.4-13.3-40.7zM214.4 317.4c-.3-.8-.5-1.6-.8-2.4-.3-.8-.5-1.7-.8-2.5-.3-.9-.5-1.7-.8-2.6-.3-.9-.6-1.8-.8-2.8-.3-.9-.6-1.9-.8-2.9-.3-1-.6-1.9-.8-2.9-.3-1-.5-1.9-.8-2.9-.3-1-.5-1.9-.8-2.9-.3-1-.5-2-.8-2.9-.3-1-.5-1.9-.8-2.9-.3-1-.5-1.9-.8-2.9-.3-1-.5-1.9-.8-2.9-.3-1-.5-1.9-.8-2.8-.2-.9-.5-1.8-.7-2.7-.2-.9-.5-1.7-.7-2.6l-.6-2.4-10.9 2.8c.2.7.4 1.5.6 2.3l.6 2.4c.2.8.4 1.6.7 2.5s.5 1.7.7 2.6c.2.9.5 1.8.7 2.7.2.9.5 1.8.7 2.7.2.9.5 1.8.7 2.7.2.9.5 1.8.7 2.7.2.9.5 1.8.8 2.7.3.9.5 1.8.8 2.7.3.9.5 1.8.8 2.7.3.9.5 1.8.8 2.7.3.9.5 1.7.8 2.6.3.8.5 1.7.8 2.5.2.8.5 1.6.7 2.3.2.8.5 1.5.7 2.2l6.3 19.3-28.8 9.7 10 2.6 31-10.4-6.8-21zM162.6 243.7l-25 119.5 10.7 32.2 7.6 6.5-11.5-34.7 26.9-128.8z\"\r\n          />\r\n          <path\r\n            className=\"lettersFront\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            fill=\"#67B1E0\"\r\n            d=\"M266.7 322.8l19.2-6.5 12.1 37.2-19.2 6.5 13.2 40.6-45.2 15.6-13.3-40.7-77.5 26.4-11.5-34.8 26.9-128.8 61.5-19.9 33.8 104.4zm-62-38.9c-.3-1-.5-1.9-.8-2.8-.2-.9-.5-1.8-.7-2.7-.2-.9-.5-1.7-.7-2.6l-.6-2.4-1.1.4c-.1 1.6-.2 3.2-.4 4.8-.1 1.6-.3 3.2-.4 4.7-.1 1.6-.3 3.1-.5 4.7s-.3 3.1-.5 4.7-.4 3.1-.5 4.7c-.2 1.6-.4 3.2-.6 4.7l-.6 4.8-.6 4.8-6.4 36.8 31-10.4-6.8-20.8c-.3-.8-.5-1.6-.8-2.4-.3-.8-.5-1.7-.8-2.5-.3-.9-.5-1.7-.8-2.6-.3-.9-.6-1.8-.8-2.8-.3-.9-.6-1.9-.8-2.9-.3-1-.6-1.9-.8-2.9-.3-1-.6-1.9-.8-2.9-.3-1-.5-1.9-.8-2.9-.3-1-.5-2-.8-2.9-.3-1-.5-1.9-.8-2.9-.3-1-.5-1.9-.8-2.9-.5-.9-.8-1.9-1-2.8\"\r\n          />\r\n          <path\r\n            className=\"lettersSide\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            fill=\"#3A7199\"\r\n            d=\"M390 347.5c-.1-1.9-.3-3.8-.5-5.5-.2-1.7-.4-3.4-.7-4.9-.3-1.5-.5-2.9-.9-4.3-.3-1.3-.7-2.5-1.1-3.6-.4-1.1-.8-2.1-1.3-3.1-.5-.9-.9-1.8-1.5-2.5-.5-.8-1.1-1.4-1.7-2-.6-.6-1.2-1.1-1.8-1.5-.6-.4-1.3-.7-2-1.1-.7-.3-1.4-.6-2-.8l-2.1-.6c-.7-.2-1.5-.3-2.2-.3h-14.3 1.6l2.1.3c.7.1 1.3.3 2 .5.6.2 1.3.5 1.9.8.6.3 1.2.6 1.8 1 .6.4 1.2.8 1.7 1.3s1.1 1.1 1.5 1.8c.5.7.9 1.5 1.4 2.3.4.9.8 1.8 1.2 2.8.4 1 .7 2.2 1 3.4.3 1.2.6 2.5.8 4 .2 1.4.4 2.9.6 4.5.2 1.6.3 3.3.4 5.1.1 1.8.2 3.8.2 5.8 0 2.1 0 4.3-.1 6.7-.1 2.4-.2 4.9-.4 7.6-.2 2.7-.4 5.5-.7 8.4-.3 2.9-.6 5.7-.9 8.4-.3 2.7-.7 5.2-1 7.5-.4 2.4-.8 4.6-1.2 6.7-.4 2.1-.8 4-1.3 5.8-.5 1.8-.9 3.5-1.4 5.1s-1 3.1-1.5 4.5-1 2.7-1.6 3.9c-.5 1.2-1.1 2.3-1.6 3.3-.3.5-.5.9-.8 1.4-.1.1-.2.3-.3.4-.2.3-.4.6-.6.8-.1.2-.2.3-.3.5-.2.2-.3.5-.5.7-.1.1-.2.3-.4.4-.2.2-.3.4-.5.6l-.4.4-.5.5c-.1.1-.3.2-.4.3-.2.1-.3.3-.5.4-.1.1-.3.2-.4.3-.2.1-.3.2-.5.3-.1.1-.3.2-.4.2-.3.2-.5.3-.8.4-.6.3-1.3.5-2 .7h-.1c-.6.2-1.3.4-1.9.5h-.1c-.6.1-1.3.2-1.9.2H349c-.7-.1-1.3-.2-2-.3h-.1c-.6-.1-1.3-.3-1.9-.5h-.1c-.6-.2-1.2-.5-1.8-.8-.6-.3-1.2-.7-1.8-1.1 0 0-.1 0-.1-.1 0 0-.1 0-.1-.1 0 0-.1 0-.1-.1 0 0-.1 0-.1-.1l11 8.3.1.1.1.1s.1 0 .1.1c0 0 .1 0 .1.1.3.2.6.4 1 .6.3.2.6.4 1 .5.3.2.6.3.9.4.3.1.7.3 1 .4h.2l.9.3c.3.1.7.2 1.1.3h.2c.3.1.6.1.9.2.4.1.7.1 1.1.1H363c.3 0 .5 0 .8-.1.3 0 .5-.1.8-.1.1 0 .2 0 .3-.1h.2c.1 0 .2 0 .3-.1.3-.1.5-.1.8-.2.3-.1.5-.1.8-.2.1 0 .1 0 .2-.1.1 0 .2-.1.3-.1.2-.1.4-.1.6-.2.2-.1.4-.2.6-.2l.6-.3c.1 0 .1-.1.2-.1s.1-.1.2-.1.1-.1.2-.1.1-.1.2-.1.1-.1.2-.1c.1-.1.3-.2.4-.3.2-.1.4-.2.6-.4.1 0 .1-.1.2-.1.1-.1.2-.1.2-.2.1-.1.2-.1.3-.2.1-.1.2-.2.3-.2.1-.1.3-.2.4-.4.2-.2.4-.3.5-.5l.3-.3c.1-.1.1-.1.1-.2l.2-.2c.1-.1.2-.3.4-.4.1-.2.3-.3.4-.5.2-.2.4-.5.6-.7.1-.1.2-.2.3-.4 0 0 0-.1.1-.1l.1-.1c.2-.2.3-.5.5-.8.1-.2.2-.3.3-.5l.9-1.5c.6-1.1 1.2-2.2 1.8-3.5.6-1.3 1.1-2.7 1.7-4.2.5-1.5 1.1-3.1 1.6-4.8.5-1.7 1-3.5 1.5-5.5.5-1.9 1-4 1.4-6.3s.9-4.6 1.3-7.2c.4-2.6.8-5.3 1.1-8.1.4-2.9.7-5.9 1-9 .3-3.2.6-6.2.8-9 .2-2.9.3-5.6.4-8.1.1-2.6.1-5 .1-7.2.1-1.6 0-3.7-.1-5.6zM325.4 293.8c.7-.6 1.3-1.2 2-1.8.2-.2.4-.4.6-.5.8-.7 1.7-1.4 2.6-2.1.2-.1.4-.3.6-.4.7-.5 1.4-1.1 2.2-1.6.3-.2.5-.4.8-.5.8-.5 1.7-1.1 2.5-1.6.1-.1.2-.1.3-.2 1-.6 1.9-1.1 2.9-1.6.2-.1.3-.2.5-.3.9-.5 1.9-.9 2.9-1.3.1-.1.3-.1.4-.2 1-.4 2-.9 3.1-1.2.4-.2.9-.3 1.3-.5.1 0 .2-.1.4-.1.4-.1.8-.3 1.2-.4.1 0 .1 0 .2-.1.5-.1 1-.3 1.5-.4h.1c.5-.1 1-.3 1.5-.4l-11.1 2.7c-.1 0-.3.1-.4.1-.1 0-.3.1-.4.1-.1 0-.3.1-.4.1h-.1c-.1 0-.2.1-.3.1-.3.1-.7.2-1 .3h-.1-.1c-.2.1-.5.1-.7.2-.1 0-.2.1-.4.1-.1 0-.1 0-.2.1-.1 0-.1 0-.2.1-.1 0-.2.1-.3.1-.3.1-.6.2-1 .3-.6.2-1.2.4-1.8.7-.4.2-.7.3-1.1.5-.1.1-.2.1-.4.2-.1 0-.2.1-.3.1-.6.3-1.1.5-1.7.8-.2.1-.5.2-.7.4-.1 0-.2.1-.3.1-.1 0-.1.1-.2.1-.2.1-.3.2-.5.3-.7.4-1.5.8-2.2 1.2-.1.1-.2.1-.3.2-.6.4-1.2.7-1.8 1.1-.2.1-.4.3-.6.4-.1.1-.2.1-.3.2-.1.1-.3.2-.4.3-.7.5-1.3.9-2 1.4-.2.1-.4.3-.5.4-.1.1-.1.1-.2.1-.7.6-1.5 1.2-2.2 1.8-.1 0-.1.1-.2.1-.1.1-.3.2-.4.4-.4.3-.7.6-1.1 1-.3.2-.5.5-.8.7-.2.2-.4.4-.7.6-.8.7-1.5 1.5-2.3 2.3-1.7 1.8-3.2 3.7-4.8 5.7-1.5 2-3 4.2-4.3 6.5-1.4 2.3-2.7 4.7-3.9 7.3-1.2 2.6-2.4 5.3-3.4 8.1-1.1 2.8-2.1 5.8-3 8.9-.9 3.1-1.7 6.3-2.4 9.6s-1.3 6.8-1.9 10.4c-.5 3.6-1 7.3-1.3 11.1-.4 3.8-.6 7.5-.7 11.2-.1 3.6-.2 7.1-.1 10.5.1 3.4.3 6.7.6 9.9s.7 6.3 1.3 9.3c.5 3 1.2 5.9 1.9 8.6.7 2.8 1.5 5.4 2.4 8 .9 2.5 1.9 5 3 7.3s2.3 4.5 3.6 6.6c.4.7.9 1.4 1.3 2.1.4.7.9 1.3 1.4 2s.9 1.3 1.4 1.9l1.5 1.8 8.3 9.9c-.5-.6-1.1-1.3-1.6-2s-1-1.3-1.5-2l-1.5-2.1c-.5-.7-1-1.5-1.4-2.2-1.4-2.3-2.7-4.6-3.9-7.1-1.2-2.5-2.3-5.1-3.2-7.8-1-2.7-1.9-5.6-2.6-8.6-.8-3-1.4-6.1-2-9.3-.6-3.2-1-6.5-1.3-10-.3-3.4-.5-7-.6-10.7-.1-3.7-.1-7.5.1-11.3.1-3.9.4-7.9.8-12s.9-8.1 1.4-12c.6-3.9 1.3-7.6 2-11.2.8-3.6 1.6-7 2.6-10.4 1-3.3 2-6.5 3.2-9.6 1.2-3.1 2.4-6 3.7-8.7 1.3-2.8 2.7-5.4 4.2-7.9s3-4.8 4.7-7c1.6-2.2 3.3-4.2 5.1-6.1.8-.9 1.6-1.7 2.4-2.5.2-.3.4-.5.6-.7z\"\r\n          />\r\n          <path\r\n            className=\"lettersFront\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            fill=\"#67B1E0\"\r\n            d=\"M436.1 339.3c.5 3.1 1 6.4 1.3 9.8.3 3.4.5 6.9.6 10.4.1 3.6 0 7.3-.1 11.1-.2 3.8-.4 7.8-.8 11.8-.4 4.1-.9 8-1.5 11.8-.6 3.8-1.3 7.5-2 11-.8 3.5-1.6 6.9-2.6 10.2-1 3.3-2 6.4-3.1 9.5-1.1 3-2.4 5.9-3.6 8.7-1.3 2.8-2.7 5.4-4.1 7.9-1.4 2.5-3 4.9-4.6 7.1-1.6 2.2-3.3 4.3-5 6.3-1.8 2-3.6 3.8-5.5 5.5-1.9 1.7-3.8 3.3-5.8 4.7-2 1.4-4.1 2.7-6.2 3.9-2.1 1.2-4.3 2.2-6.6 3.1-2.3.9-4.6 1.7-6.9 2.3-2.3.6-4.7 1.1-7.2 1.5-2.4.3-4.9.6-7.4.6-2.5.1-5.1 0-7.7-.2-2.6-.2-5.2-.5-7.7-1s-4.9-1.1-7.3-1.8c-2.4-.7-4.6-1.6-6.8-2.6s-4.3-2.1-6.4-3.4c-2.1-1.3-4-2.6-5.9-4.1-1.9-1.5-3.7-3.1-5.4-4.9-1.7-1.8-3.4-3.6-4.9-5.6-1.6-2-3-4.1-4.4-6.4-1.4-2.3-2.7-4.6-3.9-7.1-1.2-2.5-2.3-5.1-3.2-7.8-1-2.7-1.9-5.6-2.6-8.6-.8-3-1.4-6.1-2-9.3-.6-3.2-1-6.5-1.3-10-.3-3.4-.5-7-.6-10.7-.1-3.7-.1-7.5.1-11.3.1-3.9.4-7.9.8-12s.9-8.1 1.4-12c.6-3.9 1.3-7.6 2-11.2.8-3.6 1.6-7 2.6-10.4 1-3.3 2-6.5 3.2-9.6 1.2-3.1 2.4-6 3.7-8.7 1.3-2.8 2.7-5.4 4.2-7.9s3-4.8 4.7-7c1.6-2.2 3.3-4.2 5.1-6.1 1.8-1.9 3.6-3.7 5.5-5.3 1.9-1.6 3.9-3.1 5.9-4.5 2-1.4 4.1-2.6 6.3-3.7 2.1-1.1 4.4-2.1 6.6-2.9 2.3-.8 4.6-1.5 6.9-2.1 2.4-.5 4.8-1 7.2-1.2 2.5-.3 5-.4 7.5-.4 2.6 0 5.2.1 7.8.4 2.6.3 5.1.7 7.6 1.2s4.9 1.2 7.2 1.9c2.3.8 4.6 1.6 6.8 2.7 2.2 1 4.3 2.1 6.4 3.4 2.1 1.3 4 2.6 5.9 4.1 1.9 1.5 3.7 3.1 5.4 4.8 1.7 1.7 3.3 3.6 4.9 5.6 1.5 2 3 4.1 4.3 6.3 1.4 2.2 2.6 4.6 3.8 7 1.2 2.4 2.2 5 3.2 7.7.9 2.7 1.8 5.5 2.5 8.4.5 3 1.1 6 1.7 9.1zm-52 69.5c.5-1.9 1-4 1.4-6.3.4-2.2.9-4.6 1.3-7.2.4-2.6.8-5.3 1.1-8.1.4-2.9.7-5.9 1-9 .3-3.2.6-6.2.8-9 .2-2.9.3-5.6.4-8.1.1-2.6.1-5 .1-7.2 0-2.3-.1-4.3-.2-6.3-.1-1.9-.3-3.8-.5-5.5-.2-1.7-.4-3.4-.7-4.9-.3-1.5-.5-2.9-.9-4.3-.3-1.3-.7-2.5-1.1-3.6-.4-1.1-.8-2.1-1.3-3.1-.5-.9-.9-1.8-1.5-2.5-.5-.8-1.1-1.4-1.7-2-.6-.6-1.2-1.1-1.8-1.5-.6-.4-1.3-.7-2-1.1-.7-.3-1.4-.6-2-.8l-2.1-.6c-.7-.2-1.5-.3-2.2-.3-.8-.1-1.5-.1-2.2-.1-.7 0-1.5.1-2.2.2-.7.1-1.5.2-2.2.4-.7.2-1.4.4-2.1.7-.7.3-1.4.6-2.1 1.1-.7.5-1.4 1-2 1.6-.7.6-1.3 1.4-1.9 2.2-.6.8-1.2 1.7-1.8 2.8-.6 1-1.2 2.1-1.8 3.4-.6 1.2-1.1 2.6-1.7 4-.5 1.5-1.1 3-1.6 4.7-.5 1.7-1 3.5-1.5 5.4-.5 1.9-.9 4-1.4 6.2-.4 2.2-.9 4.6-1.2 7.1-.4 2.5-.8 5.2-1.1 8.1-.3 2.9-.7 5.9-1 9.1-.3 3.2-.6 6.2-.8 9.1-.2 2.9-.3 5.6-.4 8.2-.1 2.6-.1 5-.1 7.3s.1 4.4.2 6.4.3 3.9.4 5.7c.2 1.8.4 3.5.7 5 .3 1.6.5 3 .9 4.4.3 1.4.7 2.6 1.1 3.8.4 1.2.8 2.2 1.3 3.2s.9 1.9 1.5 2.6c.5.8 1.1 1.5 1.6 2.1.6.6 1.2 1.1 1.8 1.6.6.4 1.3.8 2 1.2.7.3 1.3.6 2 .9l2.1.6c.7.2 1.5.3 2.2.3.7.1 1.5.1 2.2 0 .7 0 1.5-.1 2.2-.2.7-.1 1.5-.3 2.2-.5.7-.2 1.4-.5 2.1-.8.7-.3 1.4-.7 2.1-1.2.7-.5 1.4-1.1 2-1.8.7-.7 1.3-1.5 1.9-2.4.6-.9 1.2-1.8 1.8-2.9.6-1.1 1.2-2.2 1.8-3.5.6-1.3 1.1-2.7 1.7-4.2.5-1.5 1.1-3.1 1.6-4.8.6-1.9 1.1-3.7 1.6-5.6\"\r\n          />\r\n          <path\r\n            className=\"lettersSide\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            fill=\"#3A7199\"\r\n            d=\"M548.6 448.8l-18.7-2.8 13.4 7.7 20.1 2.9zM480.2 475.8l-6 39.3 9.2 13 6.4-42.4zM499.1 425.2c.1-.8.3-1.6.4-2.5.1-.8.3-1.7.4-2.6.1-.9.3-1.8.5-2.7.2-.9.3-1.9.5-2.9s.4-1.9.5-2.9c.2-1 .4-2 .6-2.9l.6-3 .6-3 .6-3 .6-3c.2-1 .4-2 .6-2.9.2-1 .4-2 .6-2.9.2-1 .4-1.9.6-2.8l.6-2.7c.2-.9.4-1.7.6-2.6.2-.8.4-1.7.5-2.5l-10.9-2.4c-.2.7-.3 1.5-.5 2.3-.2.8-.3 1.6-.5 2.4-.2.8-.3 1.7-.5 2.5-.2.9-.4 1.7-.5 2.6l-.6 2.7-.6 2.7-.6 2.7c-.2.9-.4 1.8-.6 2.8-.2.9-.4 1.8-.6 2.8-.2.9-.4 1.8-.5 2.8-.2.9-.3 1.8-.5 2.7-.2.9-.3 1.8-.5 2.7-.2.9-.3 1.8-.5 2.6-.1.9-.3 1.7-.4 2.5-.1.8-.3 1.6-.4 2.4-.1.8-.2 1.5-.4 2.3l-3.1 20.1-30-4.4 7.8 6.9 32.3 4.7 3.3-21.5zM486.2 336.1l-76.3 95.3-5 33.7 3.8 9.2 5.5-36.2 82.1-102.8z\"\r\n          />\r\n          <path\r\n            className=\"lettersFront\"\r\n            stroke=\"#265D85\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeMiterlimit=\"10\"\r\n            strokeWidth=\"2.5\"\r\n            fill=\"#67B1E0\"\r\n            d=\"M543.3 453.7l20.1 2.9-6 38.6-20-2.8-6.5 42.1-47.4-6.5 6.5-42.3-81.1-11.4 5.4-36.2 82.2-102.8 63.8 9.9-17 108.5zm-37.7-62.8c.2-1 .4-1.9.6-2.8l.6-2.7c.2-.9.4-1.7.6-2.6.2-.8.4-1.7.5-2.5l-1.2-.2c-.8 1.4-1.6 2.7-2.5 4.1s-1.7 2.7-2.5 4c-.8 1.3-1.7 2.7-2.5 4-.9 1.3-1.7 2.6-2.6 4-.9 1.3-1.7 2.6-2.6 3.9-.9 1.3-1.8 2.6-2.7 4s-1.8 2.7-2.7 4-1.8 2.7-2.7 4L463.6 442l32.3 4.7 3.3-21.6c.1-.8.3-1.6.4-2.5.1-.8.3-1.7.4-2.6.1-.9.3-1.8.5-2.7.2-.9.3-1.9.5-2.9s.4-1.9.5-2.9c.2-1 .4-2 .6-2.9l.6-3 .6-3 .6-3 .6-3c.2-1 .4-2 .6-2.9.1-.8.3-1.8.5-2.8\"\r\n          />\r\n        </g>\r\n      </svg>\r\n\r\n      {/* Content */}\r\n      <div className=\"pt-20 pl-[25rem] pr-12 relative z-10 font-sans text-white\">\r\n        <h3 className=\"text-[2.625rem] font-black mb-3 leading-tight\">\r\n          Hello?? Is somebody there?!?\r\n        </h3>\r\n        <p className=\"text-xl font-normal leading-relaxed text-[#d1e2ed]\">\r\n          We know it's scary, but the page you're trying to reach can't be\r\n          found. Perhaps it was just a bad{\" \"}\r\n          <span className=\"line-through\">link</span> dream?\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n"],"names":["_svgPathExp","_numbersExp","_scientific","_selectorExp","_DEG2RAD","_sin","_cos","_abs","_sqrt","_isString","value","_isNumber","_roundingNum","_round","getRawPath","e","rawPath","stringToRawPath","reverseSegment","segment","i","y","_createPath","ignore","path","attr","name","_typeAttrs","_attrToObj","attrs","props","obj","convertToPath","element","swap","type","circ","data","x","r","ry","rcirc","rycirc","points","w","h","x2","x3","x4","x5","x6","y2","y3","y4","y5","y6","rawPathToString","arcToSegment","lastX","lastY","rx","angle","largeArcFlag","sweepFlag","angleRad","cosAngle","sinAngle","PI","TWOPI","dx2","dy2","x1","y1","x1_sq","y1_sq","radiiCheck","rx_sq","ry_sq","sq","coef","cx1","cy1","sx2","sy2","cx","cy","ux","uy","vx","vy","temp","angleStart","angleExtent","segments","angleIncrement","controlLength","ma","mb","mc","md","d","a","m","n","relativeX","relativeY","twoThirds","elements","errorMessage","command","isRelative","startX","startY","difX","difY","beziers","prevCommand","flag1","flag2","line","sx","sy","ex","ey","result","l","sl","gsap","_toArray","_lastLinkedAnchor","_coreInitted","PluginClass","_getGSAP","_isFunction","_atan2","_PI","_2PI","_angleMin","_angleMax","_bigNum","_numExp","_commands","_log","message","_bonusValidated","_getAverageXY","_getSize","xMax","xMin","yMax","yMin","_getTotalSize","samplesPerBezier","j","inc","k","t","inv","_sortByComplexity","b","_sortBySize","sizeA","sizeB","_offsetSegment","shapeIndex","wrap","index","_getTotalMovement","sb","eb","offsetX","offsetY","_getClosestShapeIndex","checkReverse","sCenter","eCenter","min","minIndex","copy","_getClosestAnchor","closestDistance","closestX","closestY","dx","dy","_getClosestSegment","bezier","pool","startIndex","sortRatio","minSize","size","_subdivideSegmentQty","quantity","tally","max","newPointsPerSegment","ax","ay","cp1x","cp1y","cp2x","cp2y","bx","by","_equalizeSegmentQuantity","start","end","map","fillSafe","dif","longer","shorter","added","sortMethod","shapeIndices","reverse","log","_pathFilter","precompile","_offsetPoints","text","offset","s","_equalizePointQuantity","factor","nextX","nextY","_pointsFilter","startNums","endNums","_buildPointsFilter","_parseShape","shape","forcePath","target","isString","_convertToPath","_populateSmoothData","tolerance","limit","smooth","a2","isSmooth","smoothData","_parseOriginFactors","v","_shortAngle","_morphMessage","_tweenRotation","linkedPT","so","eo","sa","angleDif","_short","_initCore","required","MorphSVGPlugin","core","Plugin","tween","targets","p","pt","isPoly","startSmooth","endSmooth","startSeg","endSeg","precompiled","sData","eData","originFactors","useRotation","cs","fill","origins","ratio","controlPT","anchorPT","rnd","space","easeInOut","sin","cos","property","shape1","shape2","_ref","NotFound","yetiTL","useRef","chatterTL","useEffect","window","registerPlugin","setupAnimations","current","kill","goDark","set","visibility","goLight","mouthShape1","mouthShape4","timeline","paused","repeat","yoyo","to","duration","morphSVG","add","play","pause","jsxs","Helmet","jsx"],"mappings":"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","x_google_ignoreList":[0,1]}